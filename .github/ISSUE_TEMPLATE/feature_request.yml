# Название шаблона для создания issue (тикетов) с предложениями новых функций
name: Feature request
# Описание назначения этого шаблона - для предложения улучшений или новых функций
description: Предложить улучшение или новую фичу
# Метки (labels), которые автоматически будут присвоены issue при создании через этот шаблон
labels: [enhancement]
# Тело формы - поля, которые пользователь должен заполнить при создании issue
body:
  # Первое поле - текстовое поле для описания решаемой проблемы
  - type: textarea
    id: problem
    attributes:
      label: Какая проблема решается?
      placeholder: "Какой кейс/боль у пользователя?"
    validations:
      required: true  # Поле обязательно для заполнения

  # Второе поле - текстовое поле для описания предлагаемого решения
  - type: textarea
    id: solution
    attributes:
      label: Предлагаемое решение
      placeholder: "Опиши поведение/механику"
    validations:
      required: true  # Поле обязательно для заполнения

  # Третье поле - текстовое поле для описания альтернативных решений
  - type: textarea
    id: alternatives
    attributes:
      label: Альтернативы
      placeholder: "Что рассматривалось ещё?"

  # Четвертое поле - текстовое поле для дополнительной информации
  - type: textarea
    id: context
    attributes:
      label: Дополнительно (макеты, ссылки, скрины)





#
# ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
#
# 1. СТРУКТУРА ШАБЛОНА FEATURE REQUEST:
#    - Шаблон определяет стандартизированную форму для предложения новых функций
#    - Фокусируется на проблемно-ориентированном подходе к разработке фич
#    - Помогает структурировать процесс обсуждения новых возможностей
#
# 2. ПОЛЯ ФОРМЫ И ИХ НАЗНАЧЕНИЕ:
#    - problem: описание проблемы или потребности пользователя (ПОЧЕМУ нужна фича)
#    - solution: конкретное предложение по реализации (ЧТО должно быть сделано)
#    - alternatives: рассмотренные альтернативные подходы (КАК еще можно решить)
#    - context: дополнительная информация для лучшего понимания (ВИЗУАЛИЗАЦИЯ)
#
# 3. ЛОГИЧЕСКАЯ ПОСЛЕДОВАТЕЛЬНОСТЬ:
#    - Сначала проблема → затем решение → альтернативы → контекст
#    - Это соответствует естественному процессу обсуждения новых идей
#    - Помогает оценить необходимость и целесообразность предложения
#
# 4. ПРОБЛЕМНО-ОРИЕНТИРОВАННЫЙ ПОДХОД:
#    - Акцент на проблеме пользователя, а не на технической реализации
#    - Помогает понять реальную потребность за предложением
#    - Уменьшает количество ненужных или непродуманных фич
#
# 5. АЛЬТЕРНАТИВНЫЕ РЕШЕНИЯ:
#    - Поле alternatives стимулирует критическое мышление
#    - Позволяет рассмотреть разные подходы к решению проблемы
#    - Помогает выбрать оптимальное решение из нескольких вариантов
#
# 6. КОНТЕКСТ И ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ:
#    - Место для ссылок на дизайн-макеты, прототипы, скриншоты
#    - Возможность прикрепить ссылки на аналогичные реализации
#    - Любые материалы, помогающие лучше понять предложение
#
# 7. АВТОМАТИЗАЦИЯ И КЛАССИФИКАЦИЯ:
#    - Автоматическое проставление метки "enhancement" для фильтрации
#    - Стандартизированный формат упрощает оценку приоритетов
#    - Помогает product owner'у принимать взвешенные решения
#
# 8. ПРЕИМУЩЕСТВА СТАНДАРТИЗИРОВАННОГО ПОДХОДА:
#    - Снижает количество неполных или непонятных предложений
#    - Ускоряет процесс оценки и планирования разработки
#    - Обеспечивает единый стандарт качества для всех feature request'ов
#
# 9. РУССКОЯЗЫЧНЫЙ ИНТЕРФЕЙС:
#    - Все тексты на русском языке для удобства команды
#    - Используется понятная терминология ("фича", "кейс", "боль")
#    - Соответствует языку общения в проекте
#
# Комментарии сохранены на русском языке в соответствии с требованиями,
# без изменения логики и структуры исходного кода YAML.
#
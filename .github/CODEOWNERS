# Файл CODEOWNERS - определяет владельцев кода в репозитории
# Синтаксис: шаблон_пути @username1 @username2 ...

# Символ * означает "все файлы и папки" в репозитории
# @Titlushkin - упоминание пользователя GitHub, который является куратором
* @Titlushkin

#
# ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
#
# 1. НАЗНАЧЕНИЕ ФАЙЛА CODEOWNERS:
#    - Автоматически назначает ревьюверов для pull request'ов
#    - Определяет ответственных за различные части кодовой базы
#    - Упрощает процесс code review и утверждения изменений
#
# 2. СИНТАКСИС И СТРУКТУРА:
#    - Шаблон пути (pattern) определяет к каким файлам применяется правило
#    - @username указывает GitHub пользователя или команду
#    - Можно указывать несколько владельцев через пробел
#
# 3. ЗВЕЗДОЧКА (*) КАК УНИВЕРСАЛЬНЫЙ ШАБЛОН:
#    - * соответствует всем файлам и папкам в репозитории
#    - Это самое широкое правило, охватывающее всю кодовую базу
#    - Правила обрабатываются сверху вниз, более специфичные правила должны быть выше
#
# 4. ВЛАДЕЛЕЦ КОДА @Titlushkin:
#    - Пользователь GitHub с ником "Titlushkin"
#    - Будет автоматически назначаться ревьювером для всех pull request'ов
#    - Получает уведомления о изменениях в коде
#
# 5. ПРАКТИЧЕСКОЕ ПРИМЕНЕНИЕ:
#    - При создании pull request'а GitHub автоматически назначает @Titlushkin ревьювером
#    - Владелец получает уведомления о pending review requests
#    - Изменения не могут быть merged без approval от указанного владельца
#
# 6. ПРЕИМУЩЕСТВА ИСПОЛЬЗОВАНИЯ:
#    - Автоматизация процесса code review
#    - Четкое определение ответственности за код
#    - Гарантия что изменения проверяются компетентными людьми
#    - Снижение риска merge непроверенного кода
#
# 7. ВОЗМОЖНОСТИ РАСШИРЕНИЯ:
#    - Можно добавить более специфичные правила для разных частей проекта
#    - Пример: /src/frontend/* @frontend-team
#    - Пример: /docs/* @tech-writers
#    - Пример: /.github/* @project-maintainers
#
# 8. КОМАНДЫ И ГРУППЫ:
#    - Вместо отдельных пользователей можно указывать GitHub teams
#    - Пример: * @my-org/development-team
#    - Это полезно для больших проектов с распределенной ответственностью
#
# 9. BEST PRACTICES:
#    - Использовать конкретные пути вместо универсальных шаблонов когда это возможно
#    - Указывать несколько ревьюверов для критических частей кода
#    - Регулярно обновлять файл при изменениях в команде
#
# Комментарии сохранены на русском языке в соответствии с требованиями,
# без изменения логики и структуры исходного кода.
#
// Импорт необходимых компонентов из библиотеки react-router-dom для реализации маршрутизации
// BrowserRouter - компонент, который обеспечивает работу маршрутизации используя HTML5 History API
import { BrowserRouter, Routes, Route } from 'react-router-dom';
// Импорт компонентов страниц приложения из соответствующих папок
import TestPage from './pages/TestPage'; // Тестовая страница для отладки и разработки
import StatisticPage from './pages/StatisticPage'; // Страница со статистикой
import MyTasksPage from './pages/MyTasksPage/MyTasksPage'; // Страница "Мои задачи"
import DelegatedTasksPage from './pages/DelegatedPage/DelegatedTasksPage'; // Страница "Делегированные задачи"
import CreateTaskPage from './pages/CreateTask/CreateTaskPage'; // Страница создания новой задачи
import ProfilePage from './pages/ProfilePage/ProfilePage'; // Страница профиля пользователя

// Главный компонент приложения - корневой компонент React приложения
function App() {
  //Это главный компонент здесь подключаются глобальные компоненты реализуется роутинг
  // Комментарий поясняет назначение компонента App:
  // - Является корневым компонентом всего приложения
  // - Подключает глобальные компоненты (в данном случае маршрутизацию)
  // - Реализует систему маршрутов (роутинг) для навигации между страницами

  // Возвращение JSX разметки компонента App
  return (
    // BrowserRouter - обертка для всего приложения, обеспечивающая функциональность маршрутизации
    // Должен быть только один BrowserRouter на всё приложение, обычно на верхнем уровне
    <BrowserRouter>
      {/* Компонент Routes - контейнер для всех маршрутов приложения */}
      {/* Отвечает за отображение соответствующего компонента в зависимости от текущего URL */}
      <Routes>
        {/* Компонент Route определяет отдельный маршрут */}
        {/* path="/" - путь URL, при котором будет отображен этот компонент */}
        {/* element={<StatisticPage/>} - React компонент, который будет отображен по этому пути */}
        {/* Этот маршрут является главной страницей приложения (корневой путь) */}
        <Route path="/" element={<StatisticPage />} />

        {/* Маршрут для страницы "Мои задачи" */}
        {/* Будет активирован при переходе на URL /myTasks */}
        <Route path="/myTasks" element={<MyTasksPage />} />

        {/* Маршрут для страницы "Делегированные задачи" */}
        {/* Будет активирован при переходе на URL /delegatedTasks */}
        <Route path="/delegatedTasks" element={<DelegatedTasksPage />} />

        {/* Маршрут для страницы создания новой задачи */}
        {/* Будет активирован при переходе на URL /createTask */}
        <Route path="/createTask" element={<CreateTaskPage />} />

        {/* Маршрут для страницы профиля пользователя */}
        {/* Будет активирован при переходе на URL /profile */}
        <Route path="/profile" element={<ProfilePage />} />

        {/* Тестовый маршрут для отладки и разработки */}
        {/* Будет активирован при переходе на URL /testPage */}
        {/* Обычно используется для тестирования компонентов и функциональности во время разработки */}
        <Route path="/testPage" element={<TestPage />} />
      </Routes>
    </BrowserRouter>
  );
}

// Экспорт компонента App по умолчанию для использования в index.tsx
// Это позволяет импортировать App в других файлах как import App from './App'
export default App;

/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. Назначение компонента App:
   - Корневой компонент всего React приложения
   - Определяет структуру и маршрутизацию приложения
   - Служит точкой входа для всего пользовательского интерфейса

2. Архитектура маршрутизации:
   - Использует React Router v6 (современная версия)
   - Single Page Application (SPA) подход
   - Клиентская маршрутизация без перезагрузки страницы

3. Компонент BrowserRouter:
   - Обеспечивает функциональность маршрутизации используя HTML5 History API
   - Синхронизирует UI с URL в адресной строке браузера
   - Должен быть только один на всё приложение

4. Компонент Routes:
   - Контейнер для всех возможных маршрутов приложения
   - Отображает только первый подходящий маршрут (не все одновременно)
   - Заменяет старый компонент Switch из React Router v5

5. Компонент Route:
   - Определяет связь между URL путем и React компонентом
   - path - строка URL, при которой активируется маршрут
   - element - React компонент для отображения

6. Структура маршрутов приложения:

   Главная страница ("/"):
   - StatisticPage - страница со статистикой и обзором
   - Является точкой входа в приложение

   Функциональные страницы:
   - /myTasks - управление задачами текущего пользователя
   - /delegatedTasks - управление задачами, делегированными другим пользователям
   - /createTask - создание новых задач
   - /profile - управление профилем пользователя

   Техническая страница:
   - /testPage - для отладки и тестирования во время разработки

7. Принципы организации маршрутов:
   - ЧПУ (ЧеловекоПонятные Урлы) - пути отражают содержание страниц
   - Иерархическая структура - от общего к частному
   - Логическая группировка функциональности

8. Особенности React Router v6:
   - Упрощенный синтаксис по сравнению с v5
   - Отсутствие компонента Switch, заменен на Routes
   - element вместо component для определения отображаемого компонента

9. Масштабируемость:
   - Легко добавлять новые маршруты по мере развития приложения
   - Возможность вложенной маршрутизации для сложных страниц
   - Поддержка динамических маршрутов с параметрами

10. Навигация между страницами:
    - Использование компонента Link для навигации без перезагрузки
    - Программная навигация через useNavigate хук
    - Сохранение состояния приложения при переходе между страницами

11. Обработка ошибок маршрутизации:
    - Можно добавить маршрут для 404 страницы с path="*"
    - Обработка несуществующих маршрутов
    - Редиректы с помощью компонента Navigate

12. Производительность:
    - Lazy loading компонентов страниц для оптимизации загрузки
    - Code splitting по маршрутам
    - Предзагрузка данных для страниц

13. Best practices:
    - Держать маршрутизацию в корневом компоненте
    - Использовать относительные пути для лучшей переносимости
    - Группировать связанные маршруты вместе

14. Дальнейшее развитие:
    - Добавление защищенных маршрутов (требующих аутентификации)
    - Вложенная маршрутизация для сложных страниц
    - Динамические маршруты с параметрами (например, /tasks/:id)
*/
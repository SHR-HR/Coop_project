// Импорт типа ReactNode из библиотеки React для типизации дочерних элементов
import { type ReactNode } from 'react';

// Импорт компонентов Footer (подвал) и Header (шапка) из папки layouts
import Footer from './Footer';
import Header from './Header';

// Импорт модуля стилей из файла Layout.module.scss
// Префикс 's' используется для обращения к классам стилей
import s from './Layout.module.scss'

// Определение интерфейса Props для типизации пропсов компонента MainLayout
// Интерфейс описывает структуру принимаемых параметров
interface Props {
  // children - специальный пропс в React, который представляет дочерние элементы компонента
  // ReactNode - тип, который может содержать любой React-элемент: JSX, строки, числа, массивы и т.д.
  children: ReactNode;
}

// Объявление функционального компонента MainLayout с использованием деструктуризации пропсов
// Компонент принимает объект пропсов и извлекает из него свойство children
function MainLayout({ children }: Props) {
  // Возвращаем JSX разметку компонента
  return (
    // Основной контейнер layout с применением стиля из модуля SCSS
    // className={s.layout} - применение CSS класса из модуля стилей
    <div className={s.layout}>
      {/* Компонент Header - шапка сайта, отображается в верхней части layout */}
      <Header />

      {/* Основной контентный блок с применением стиля content из модуля SCSS
          В этот блок рендерятся все дочерние элементы, переданные в компонент */}
      <div className={s.content}>{children}</div>

      {/* Компонент Footer - подвал сайта, отображается в нижней части layout */}
      <Footer />
    </div>
  );
}

// Экспорт компонента MainLayout по умолчанию для использования в других частях приложения
export default MainLayout;


/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:

1. СТРУКТУРА КОМПОНЕНТА:
   - MainLayout является компонентом-макетом (layout component), который определяет 
     общую структуру страницы: шапку, основное содержимое и подвал
   - Компонент принимает дочерние элементы через пропс children и вставляет их 
     в контентную область

2. ТИПИЗАЦИЯ:
   - Использование TypeScript интерфейса Props обеспечивает строгую типизацию
   - ReactNode тип позволяет передавать любые валидные React-элементы

3. СТИЛИЗАЦИЯ:
   - Используется CSS Modules (файл .module.scss) для изоляции стилей
   - Подход предотвращает конфликты имен классов в разных компонентах

4. КОМПОЗИЦИЯ КОМПОНЕНТОВ:
   - Header и Footer импортируются как отдельные компоненты
   - Это демонстрирует принцип композиции в React - создание сложных интерфейсов 
     из простых компонентов

5. ПРИНЦИПЫ REACT:
   - Компонент является функциональным (Functional Component)
   - Используется деструктуризация пропсов для лучшей читаемости
   - Соблюдается принцип единственной ответственности - компонент отвечает 
     только за общую структуру макета

6. СЕМАНТИКА:
   - Четкое разделение на header, content и footer соответствует семантической 
     структуре веб-страницы
   - Такой подход улучшает доступность и SEO-оптимизацию

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
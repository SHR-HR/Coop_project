// Импорт компонента StrictMode из React для включения строгого режима разработки
// StrictMode помогает выявлять потенциальные проблемы в приложении во время разработки
import { StrictMode } from "react";
// Импорт функции createRoot из React DOM для создания корневого элемента рендеринга
// createRoot - современный API для рендеринга React приложений (заменяет ReactDOM.render)
import { createRoot } from "react-dom/client";
// Импорт глобальных CSS стилей из файла index.css
// index.css содержит базовые стили и нормализацию для всего приложения
import "./index.css";
// Импорт SCSS стилей из файла index.scss в папке styles
// index.scss импортирует все модули SCSS (переменные, reset, типографику)
import "./styles/index.scss";
// Импорт главного компонента приложения App из файла App.tsx
// App содержит всю структуру приложения и маршрутизацию
import App from "./App.tsx";
// Импорт Redux хранилища (store) из файла store.ts
// store содержит всё состояние приложения и настройки Redux
import { store } from "./store/store.ts";
// Импорт компонента Provider из react-redux для подключения Redux к React приложению
// Provider делает store доступным для всех компонентов в приложении
import { Provider } from "react-redux";

// Создание корневого элемента React приложения и рендеринг в DOM
// document.getElementById("root") - поиск HTML элемента с id="root" в index.html
// ! - оператор утверждения non-null (TypeScript), гарантирует что элемент существует
// createRoot создает корневой узел для рендеринга React компонентов
createRoot(document.getElementById("root")!).render(
  // React вмонтирует сюда всё приложение (Provider нужен для Redux Toolkit)
  // Комментарий поясняет что:
  // - React монтирует всё приложение в этот корневой элемент
  // - Provider необходим для интеграции Redux Toolkit с React

  // Компонент StrictMode - активирует дополнительные проверки и предупреждения в development режиме
  // Помогает обнаружить устаревшие методы, небезопасные практики и потенциальные проблемы
  <StrictMode>
    {/* Компонент Provider из react-redux - делает Redux store доступным для всех компонентов */}
    {/* store={store} - передача созданного хранилища в Provider */}
    {/* Все компоненты внутри Provider могут использовать Redux state и dispatch actions */}
    <Provider store={store}>
      {/* Главный компонент приложения App - содержит всю логику и структуру приложения */}
      {/* Включает маршрутизацию и все страницы приложения */}
      <App />
    </Provider>
  </StrictMode>
);





/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. Назначение файла main.tsx:
   - Точка входа (entry point) React приложения
   - Инициализация и монтирование приложения в DOM
   - Подключение глобальных зависимостей и провайдеров

2. Строгий режим React (StrictMode):
   - Включается только в development сборке
   - Выявляет устаревшие API и потенциальные проблемы
   - Двойной рендеринг компонентов для обнаружения side effects
   - Проверка на использование устаревших методов жизненного цикла

3. Современный API рендеринга (createRoot):
   - Заменяет устаревший ReactDOM.render
   - Поддерживает concurrent features (параллельные возможности)
   - Позволяет использовать новые возможности React 18+
   - Более эффективное управление корневыми элементами

4. Поиск корневого элемента:
   - document.getElementById("root") - ищет элемент с id="root"
   - Обычно это div в public/index.html
   - ! - TypeScript оператор, утверждает что элемент не null
   - Гарантирует что элемент существует перед рендерингом

5. Глобальные стили:
   - ./index.css - стандартные CSS стили и нормализация
   - ./styles/index.scss - SCSS стили с переменными и миксинами
   - Порядок импорта важен: CSS → SCSS (если есть зависимости)

6. Архитектура провайдеров:
   - Provider (Redux) - делает состояние доступным для всех компонентов
   - StrictMode (React) - добавляет проверки для разработки
   - Иерархия: StrictMode → Provider → App

7. Redux интеграция:
   - Provider оборачивает всё приложение
   - store передается как prop в Provider
   - Все компоненты получают доступ к Redux через хуки (useSelector, useDispatch)

8. Процесс инициализации приложения:
   1. Загрузка и выполнение main.tsx
   2. Импорт всех зависимостей и стилей
   3. Поиск DOM элемента #root
   4. Создание React корневого элемента
   5. Рендеринг приложения с провайдерами
   6. Монтирование в DOM

9. TypeScript особенности:
   - .tsx расширение для файлов с JSX
   - Строгая типизация всех импортов
   - Non-null assertion (!) для document.getElementById

10. Сборка и оптимизация:
    - Этот файл является entry point для сборщика (Vite/Webpack)
    - Дерево зависимостей строится от этого файла
    - Code splitting может разделять импорты на чанки

11. Масштабируемость:
    - Легко добавлять новые глобальные провайдеры (Theme, Router, etc.)
    - Поддержка различных конфигураций сборки
    - Совместимость с инструментами разработчика

12. Отладка и разработка:
    - StrictMode помогает находить проблемы на ранних этапах
    - Redux DevTools интегрируются через store конфигурацию
    - Hot Module Replacement (HMR) для быстрой разработки

13. Production сборка:
    - StrictMode автоматически отключается в production
    - Дерево зависимостей оптимизируется
    - Стили минифицируются и объединяются

14. Best practices:
    - Держать main.tsx максимально простым и чистым
    - Все настройки провайдеров выносить в отдельные файлы
    - Использовать TypeScript для type safety
    - Следовать принципу единственной ответственности
*/
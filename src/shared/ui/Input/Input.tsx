// Импорт библиотеки React для использования функциональных компонентов и JSX
import React from 'react'
// Импорт стилей из файла Input.module.scss с псевдонимом s для удобства обращения
import s from './Input.module.scss'

// Определение интерфейса (типов) для пропсов (свойств) компонента Input
interface InputProps {
  // value - текущее значение поля ввода, обязательный пропс
  value: string
  // onChange - функция-обработчик изменения значения поля ввода, обязательный пропс
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void
  // type - необязательное свойство, определяющее тип поля ввода
  type?: 'text' | 'password' | 'email' | 'number' | 'url' | 'tel' | 'search' | 'date' | 'datetime-local' | 'month' | 'time'
  // placeholder - необязательное свойство, текст-подсказка внутри поля
  placeholder?: string
  // disabled - необязательное свойство, отключающее поле ввода
  disabled?: boolean
  // error - необязательное свойство, указывающее на состояние ошибки
  error?: boolean
  // success - необязательное свойство, указывающее на состояние успеха
  success?: boolean
  // className - необязательное свойство для дополнительных CSS-классов
  className?: string // для возможности кастомизировать
  // required - необязательное свойство, указывающее на обязательность заполнения
  required?: boolean
  // min - необязательное свойство, минимальное значение для числовых полей и дат
  min?: string
}

// Объявление функционального компонента Input с деструктуризацией пропсов
function Input({
  // value - текущее значение поля, обязательный пропс
  value,
  // onChange - функция обработки изменения, обязательный пропс
  onChange,
  // type - тип поля ввода, по умолчанию 'text'
  type = 'text',
  // placeholder - текст-подсказка, по умолчанию 'Default'
  placeholder = 'Default',
  // disabled - состояние отключения, по умолчанию false
  disabled = false,
  // error - состояние ошибки, по умолчанию false
  error = false,
  // success - состояние успеха, по умолчанию false
  success = false,
  // className - дополнительные CSS-классы, по умолчанию пустая строка
  className = '',
  // required - обязательность заполнения, по умолчанию false
  required = false,
  // min - минимальное значение, по умолчанию undefined
  min
}: InputProps) {
  // Формирование массива CSS-классов для поля ввода
  const inputClasses = [
    // Базовый класс стилей поля ввода
    s.input,
    // Условное добавление класса ошибки, если error = true
    error ? s.error : '',
    // Условное добавление класса успеха, если success = true
    success ? s.success : '',
    // Условное добавление класса отключенного состояния, если disabled = true
    disabled ? s.disabled : '',
    // Добавление дополнительных классов из пропса className
    className
    // Объединение массива в строку с разделителем пробел и удаление лишних пробелов
  ].join(' ').trim()

  // Возвращение JSX-разметки компонента поля ввода
  return (
    // Нативный HTML-элемент input с применением всех свойств
    <input
      // Применение сформированных CSS-классов
      className={inputClasses}
      // Тип поля ввода (text, password, email, number и т.д.)
      type={type}
      // Текущее значение поля (контролируемый компонент)
      value={value}
      // Обработчик события изменения значения
      onChange={onChange}
      // Текст-подсказка внутри поля
      placeholder={placeholder}
      // Состояние отключения поля
      disabled={disabled}
      // Обязательность заполнения поля (HTML5 атрибут)
      required={required}
      // Минимальное значение для числовых полей и полей даты
      min={min}
    />
  )
}

// Экспорт компонента Input по умолчанию для использования в других файлах
export default Input





/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import React from 'react'
   - Обязательный импорт для работы с React компонентами и JSX
   - React.ChangeEvent<HTMLInputElement> используется для типизации события

2. import s from './Input.module.scss'
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className

3. interface InputProps
   - TypeScript интерфейс для типизации пропсов компонента
   - value и onChange - обязательные свойства
   - Остальные свойства необязательные (?) со значениями по умолчанию

4. Тип поля ввода (type):
   - Поддерживает широкий спектр HTML5 input типов
   - 'text' | 'password' | 'email' | 'number' | 'url' | 'tel' | 'search' | 'date' | 'datetime-local' | 'month' | 'time'
   - По умолчанию 'text' - стандартное текстовое поле

5. Деструктуризация пропсов с значениями по умолчанию:
   - type = 'text' - если тип не указан, используется текстовое поле
   - placeholder = 'Default' - стандартный текст-подсказка
   - disabled = false, error = false, success = false - булевы значения по умолчанию
   - className = '' - пустая строка если дополнительные классы не переданы

6. const inputClasses = [...]join(' ').trim()
   - Создание массива классов и объединение в строку
   - s.input - базовый класс всегда добавляется
   - Условные классы добавляются только при true значениях
   - join(' ') - объединяет массив в строку с пробелами
   - trim() - удаляет лишние пробелы в начале и конце

7. Логика условных классов:
   - error ? s.error : '' - класс ошибки только если error = true
   - success ? s.success : '' - класс успеха только если success = true
   - disabled ? s.disabled : '' - класс отключения только если disabled = true
   - error и success могут сосуществовать, но стили CSS определят приоритет

8. Нативный input элемент:
   - Все пропсы передаются напрямую в HTML-элемент
   - value и onChange создают контролируемый компонент
   - disabled, required, min - стандартные HTML-атрибуты

9. Контролируемый компонент:
   - value управляется извне через пропс
   - onChange уведомляет родительский компонент об изменениях
   - React полностью контролирует состояние поля ввода

10. Поддержка HTML5 атрибутов:
    - required - помечает поле как обязательное для заполнения
    - min - минимальное значение для number, date, time полей
    - type - различные типы полей с соответствующей валидацией

11. Особенности TypeScript:
    - React.ChangeEvent<HTMLInputElement> - типизация события onChange
    - Все пропсы строго типизированы для предотвращения ошибок
    - Автодополнение в IDE при использовании компонента

12. Архитектурные решения:
    - Универсальный компонент для различных типов полей ввода
    - Поддержка различных состояний (error, success, disabled)
    - Гибкая система стилизации через комбинацию классов
    - Соблюдение HTML5 стандартов для полей ввода

13. Пользовательский опыт:
    - Визуальная обратная связь через состояния error/success
    - Подсказки через placeholder
    - Браузерная валидация через required и type
    - Доступность через стандартные HTML-атрибуты
*/
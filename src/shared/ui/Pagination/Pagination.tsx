// Импорт библиотеки React для использования функциональных компонентов и JSX
import React from "react";
// Импорт стилей из файла Pagination.module.scss с псевдонимом s для удобства обращения
import s from "./Pagination.module.scss";

// Определение интерфейса (типов) для пропсов (свойств) компонента Pagination
interface Props {
  // total - общее количество элементов для пагинации
  total: number;
  // page - текущая активная страница
  page: number;
  // pageSize - количество элементов на одной странице
  pageSize: number;
  // onPageChange - функция-обработчик изменения страницы
  onPageChange: (newPage: number) => void;
}

// Объявление функционального компонента Pagination с типом React.FC (Functional Component)
// Деструктуризация пропсов в параметрах функции для прямого доступа к свойствам
const Pagination: React.FC<Props> = ({ total, page, pageSize, onPageChange }) => {
  // Вычисление общего количества страниц
  // Math.ceil округляет вверх до целого числа, чтобы последняя страница не потеряла элементы
  const totalPages = Math.ceil(total / pageSize);

  // Условный рендеринг: если всего одна или меньше страниц, компонент не отображается
  if (totalPages <= 1) return null;

  // Возвращение JSX-разметки компонента пагинации
  return (
    // Основной контейнер пагинации с применением CSS-класса
    <div className={s.pagination}>
      {/* Кнопка "Назад" для перехода на предыдущую страницу */}
      <button
        // Отключение кнопки, если текущая страница первая (page === 1)
        disabled={page === 1}
        // Обработчик клика, который вызывает onPageChange с номером предыдущей страницы
        onClick={() => onPageChange(page - 1)}
      >
        {/* Текст кнопки на русском языке */}
        Назад
      </button>

      {/* Элемент для отображения информации о текущей странице и общем количестве страниц */}
      <span>
        {/* Отображение текущей страницы и общего количества страниц в формате "X / Y" */}
        {page} / {totalPages}
      </span>

      {/* Кнопка "Вперёд" для перехода на следующую страницу */}
      <button
        // Отключение кнопки, если текущая страница последняя (page === totalPages)
        disabled={page === totalPages}
        // Обработчик клика, который вызывает onPageChange с номером следующей страницы
        onClick={() => onPageChange(page + 1)}
      >
        {/* Текст кнопки на русском языке */}
        Вперёд
      </button>
    </div>
  );
};

// Экспорт компонента Pagination по умолчанию для использования в других файлах
export default Pagination;



/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import React from "react";
   - Обязательный импорт для работы с React компонентами и JSX
   - React.FC используется для типизации функционального компонента

2. import s from "./Pagination.module.scss";
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className

3. interface Props
   - TypeScript интерфейс для типизации пропсов компонента
   - Все свойства обязательные (нет знака ?)
   - total: number - общее количество элементов
   - page: number - текущая страница (начинается с 1)
   - pageSize: number - элементов на странице
   - onPageChange: функция принимает новый номер страницы

4. React.FC<Props> - типизация функционального компонента:
   - Обеспечивает проверку типов пропсов
   - Предоставляет автодополнение в IDE
   - Указывает, что компонент принимает пропсы типа Props

5. const totalPages = Math.ceil(total / pageSize);
   - Вычисление общего количества страниц
   - Math.ceil() округляет вверх: если 15 элементов по 10 на странице = 2 страницы
   - Гарантирует, что все элементы будут отображены

6. if (totalPages <= 1) return null;
   - Условный рендеринг: скрывает пагинацию когда не нужна
   - Если 0 или 1 страница - компонент не отображается
   - Улучшает пользовательский опыт, убирая лишние элементы

7. Структура JSX:
   - <div className={s.pagination}> - основной контейнер
   - Две кнопки "Назад" и "Вперёд" с обработчиками
   - <span> с информацией о текущей странице и общем количестве

8. Кнопка "Назад":
   - disabled={page === 1} - отключается на первой странице
   - onClick={() => onPageChange(page - 1)} - уменьшает номер страницы на 1

9. Кнопка "Вперёд":
   - disabled={page === totalPages} - отключается на последней странице
   - onClick={() => onPageChange(page + 1)} - увеличивает номер страницы на 1

10. Информационный span:
     - {page} / {totalPages} - отображает текущую позицию
     - Формат "текущая / всего" интуитивно понятен пользователю

11. Логика отключения кнопок:
     - Кнопка "Назад" disabled когда page === 1 (первая страница)
     - Кнопка "Вперёд" disabled когда page === totalPages (последняя страница)
     - Предотвращает навигацию за пределы доступных страниц

12. Особенности TypeScript:
     - Строгая типизация пропсов предотвращает ошибки
     - React.FC обеспечивает правильную типизацию компонента
     - Функция onPageChange типизирована для приема number

13. Пользовательский опыт:
     - Простая и интуитивная навигация
     - Визуальная индикация доступных действий (disabled кнопки)
     - Понятное отображение текущей позиции
     - Автоматическое скрытие когда пагинация не нужна

14. Архитектурные решения:
     - Контролируемый компонент (управляется через пропсы)
     - Универсальная логика пагинации
     - Минималистичный дизайн с основной функциональностью
     - Локализация на русский язык для целевой аудитории
*/
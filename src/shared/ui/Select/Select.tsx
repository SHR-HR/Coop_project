// Импорт React хуков для управления состоянием и жизненным циклом компонента
import { useState, useRef, useEffect } from "react"
// Импорт стилей из файла Select.module.scss с псевдонимом s для удобства обращения
import s from "./Select.module.scss"

// Определение интерфейса для опции выпадающего списка с дженериком T для типа значения
interface Option<T> {
  // label - отображаемый текст опции
  label: string
  // value - значение опции, тип определяется дженериком T
  value: T
}

// Определение интерфейса для пропсов компонента Select с дженериком T
interface SelectProps<T> {
  // value - текущее выбранное значение или null если ничего не выбрано
  value: T | null
  // onChange - функция-обработчик изменения выбранного значения
  onChange: (value: T) => void
  // options - массив опций для отображения в выпадающем списке
  options: Option<T>[]
  // placeholder - необязательный текст-заполнитель когда ничего не выбрано
  placeholder?: string
  // disabled - необязательное свойство для отключения компонента
  disabled?: boolean
  // className - необязательное свойство для дополнительных CSS-классов
  className?: string
}

// Объявление функционального компонента Select с дженериком T для типа значений
function Select<T>({
  // value - текущее выбранное значение
  value,
  // onChange - функция обработки изменения значения
  onChange,
  // options - массив доступных опций
  options,
  // placeholder - текст-заполнитель, по умолчанию "Select..."
  placeholder = "Select...",
  // disabled - состояние отключения, по умолчанию undefined (false)
  disabled,
  // className - дополнительные CSS-классы, по умолчанию undefined
  className,
}: SelectProps<T>) {
  // Состояние для управления открытием/закрытием выпадающего списка
  const [open, setOpen] = useState(false)
  // Состояние для хранения текста поиска
  const [search, setSearch] = useState("")
  // Ref для отслеживания кликов вне компонента
  const wrapperRef = useRef<HTMLDivElement>(null)

  // Фильтрация опций на основе текста поиска (регистронезависимая)
  const filtered = options.filter(opt =>
    opt.label.toLowerCase().includes(search.toLowerCase())
  )

  // Поиск метки для текущего выбранного значения
  const selectedLabel = options.find(opt => opt.value === value)?.label

  // Функция-обработчик выбора опции
  const handleSelect = (val: T) => {
    // Вызов функции onChange с выбранным значением
    onChange(val)
    // Закрытие выпадающего списка после выбора
    setOpen(false)
    // Сброс текста поиска после выбора
    setSearch("")
  }

  // Эффект для закрытия выпадающего списка при клике вне компонента
  useEffect(() => {
    // Функция-обработчик клика вне компонента
    const handleClickOutside = (e: MouseEvent) => {
      // Проверка, что клик был вне компонента
      if (wrapperRef.current && !wrapperRef.current.contains(e.target as Node)) {
        // Закрытие выпадающего списка
        setOpen(false)
      }
    }
    // Добавление обработчика события клика на документ
    document.addEventListener("mousedown", handleClickOutside)
    // Функция очистки: удаление обработчика при размонтировании компонента
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, []) // Пустой массив зависимостей - эффект выполняется только при монтировании

  // Возвращение JSX-разметки компонента выпадающего списка
  return (
    // Основной контейнер компонента с ref для отслеживания кликов вне
    <div ref={wrapperRef} className={`${s.wrapper} ${className || ""}`}>
      {/* Кнопка-контрол для открытия/закрытия выпадающего списка */}
      <button
        // Тип кнопки - button для предотвращения отправки формы
        type="button"
        // Динамические классы: базовый + класс отключения если disabled
        className={`${s.control} ${disabled ? s.disabled : ""}`}
        // Обработчик клика: переключение состояния открытия, если не отключен
        onClick={() => !disabled && setOpen(!open)}
      >
        {/* Отображение выбранной метки или текста-заполнителя */}
        {selectedLabel || placeholder}
        {/* Стрелка-индикатор состояния выпадающего списка */}
        <span className={s.arrow} />
      </button>

      {/* Условный рендеринг выпадающего списка только когда open = true */}
      {open && (
        <div className={s.dropdown}>
          {/* Условный рендеринг поля поиска только если опций больше 5 */}
          {options.length > 5 && (
            <input
              // Тип поля - текстовый для поиска
              type="text"
              // CSS-класс для стилизации поля поиска
              className={s.search}
              // Текст-подсказка в поле поиска
              placeholder="Search..."
              // Значение поля поиска из состояния
              value={search}
              // Обработчик изменения текста поиска
              onChange={e => setSearch(e.target.value)}
              // Автоматический фокус на поле поиска при открытии
              autoFocus
            />
          )}
          {/* Список отфильтрованных опций */}
          <ul className={s.list}>
            {/* Условный рендеринг: опции или сообщение "нет результатов" */}
            {filtered.length > 0 ? (
              // Маппинг отфильтрованных опций в элементы списка
              filtered.map(opt => (
                <li
                  // Уникальный ключ для React, преобразованный в строку
                  key={String(opt.value)} // чтобы ключ всегда был string
                  // Динамические классы: базовая опция + класс выбранной если совпадает значение
                  className={`${s.option} ${opt.value === value ? s.selected : ""}`}
                  // Обработчик клика по опции
                  onClick={() => handleSelect(opt.value)}
                >
                  {/* Отображение метки опции */}
                  {opt.label}
                </li>
              ))
            ) : (
              // Сообщение когда нет результатов поиска
              <li className={s.noResults}>No results</li>
            )}
          </ul>
        </div>
      )}
    </div>
  )
}

// Экспорт компонента Select по умолчанию для использования в других файлах
export default Select




/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. Импорты React хуков:
   - useState - для управления состоянием компонента (open, search)
   - useRef - для получения ссылки на DOM элемент (wrapperRef)
   - useEffect - для side effects (обработка кликов вне компонента)

2. Дженерик интерфейсы:
   - Option<T> - универсальный интерфейс для опций с любым типом значения
   - SelectProps<T> - пропсы компонента с дженериком для типа значения
   - Позволяет компоненту работать с любыми типами значений (string, number, object и т.д.)

3. Состояния компонента:
   - open: boolean - управляет видимостью выпадающего списка
   - search: string - хранит текст для фильтрации опций
   - wrapperRef: RefObject - ссылка на корневой элемент для отслеживания кликов вне

4. Логика фильтрации:
   - filtered = options.filter(...) - фильтрует опции по тексту поиска
   - toLowerCase() - делает поиск регистронезависимым
   - includes() - проверяет наличие подстроки в метке опции

5. Поиск выбранной метки:
   - selectedLabel = options.find(opt => opt.value === value)?.label
   - Находит опцию с текущим значением и возвращает ее метку
   - Optional chaining (?.) защищает от undefined если опция не найдена

6. Функция handleSelect:
   - Вызывает onChange с выбранным значением
   - Закрывает выпадающий список setOpen(false)
   - Сбрасывает поиск setSearch("") для очистки фильтра

7. useEffect для закрытия при клике вне:
   - Добавляет обработчик document.addEventListener при монтировании
   - Удаляет обработчик при размонтировании (return функция очистки)
   - contains(e.target as Node) проверяет, был ли клик внутри компонента
   - Пустой массив зависимостей [] - эффект выполняется только один раз

8. Структура JSX:
   - Основной div с ref и классами
   - Button-контрол с условным onClick (проверка disabled)
   - Условный рендеринг выпадающего списка {open && ...}
   - Условный рендеринг поля поиска {options.length > 5 && ...}
   - Условный рендеринг списка опций или сообщения "нет результатов"

9. Особенности доступности:
   - type="button" на кнопке предотвращает нежелательную отправку формы
   - autoFocus на поле поиска улучшает UX при открытии
   - Правильная семантика списка <ul> и <li>

10. Управление ключами в map:
    - key={String(opt.value)} - гарантирует строковый ключ для любого типа значения
    - String() преобразует любое значение в строку для стабильности ключей

11. Условная логика отображения:
    - Поле поиска показывается только когда опций больше 5 (оптимизация UX)
    - Сообщение "No results" когда фильтрация не дает результатов
    - Класс .selected применяется к текущей выбранной опции

12. TypeScript особенности:
    - Дженерик <T> делает компонент типобезопасным для любых типов значений
    - T | null позволяет значению быть null (ничего не выбрано)
    - Строгая типизация пропсов и обработчиков

13. Пользовательский опыт:
    - Закрытие при клике вне компонента
    - Автофокус на поле поиска при открытии
    - Сброс поиска после выбора опции
    - Визуальная обратная связь через классы состояний

14. Производительность:
    - Фильтрация выполняется при каждом рендере (простая операция для типичных случаев)
    - useEffect с правильной очисткой предотвращает утечки памяти
    - Условный рендеринг поля поиска оптимизирует рендеринг
*/
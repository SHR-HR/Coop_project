// Импорт стилей из файла ChartDonut.module.scss с псевдонимом s для удобства обращения
import s from "./ChartDonut.module.scss";

// Определение типа Props для пропсов (свойств) компонента ChartDonut
type Props = {
    // completed - количество завершенных задач
    completed: number;
    // inWork - количество задач в работе
    inWork: number;
    // failed - количество проваленных/просроченных задач
    failed: number;
    // size - необязательное свойство, размер диаграммы в пикселях
    size?: number;   // px
    // title - необязательное свойство, заголовок для всплывающей подсказки и доступности
    title?: string;  // tooltip/aria
};

// Объявление функционального компонента ChartDonut с деструктуризацией пропсов
export default function ChartDonut({
    // completed - количество завершенных задач
    completed,
    // inWork - количество задач в работе
    inWork,
    // failed - количество проваленных задач
    failed,
    // size - размер диаграммы, по умолчанию 96 пикселей
    size = 96,
    // title - заголовок, по умолчанию "Диаграмма"
    title = "Диаграмма",
}: Props) {
    // Вычисление общего количества задач с защитой от отрицательных значений
    const total = Math.max(0, completed + inWork + failed);
    // Проверка, равно ли общее количество нулю (нет данных)
    const isZero = total === 0;

    // Вычисление угла в градусах для завершенных задач в круговой диаграмме
    const a = isZero ? 0 : (completed / total) * 360;
    // Вычисление угла в градусах для завершенных + задач в работе
    const b = isZero ? 0 : ((completed + inWork) / total) * 360;

    // Возвращение JSX-разметки компонента
    return (
        // Основная обертка компонента с классом wrapper
        <div className={s.wrapper}>
            {/* Контейнер круговой диаграммы */}
            <div
                // Применение CSS-класса donut из модуля стилей
                className={s.donut}
                // Динамические inline-стили для диаграммы
                style={{
                    // Установка ширины из пропса size
                    width: size,
                    // Установка высоты из пропса size
                    height: size,
                    // Условное определение фонового градиента
                    background: isZero
                        // Если данных нет - серый равномерный градиент
                        ? "conic-gradient(#e5e7eb 0 360deg)"
                        // Если есть данные - многоцветный градиент с секторами
                        : `conic-gradient(var(--ok) 0 ${a}deg, var(--warn) 0 ${b}deg, var(--bad) 0 360deg)`,
                }}
                // Атрибут доступности для скринридеров
                aria-label={title}
                // Всплывающая подсказка при наведении курсора
                title={
                    isZero
                        // Текст подсказки когда данных нет
                        ? `${title}: данных нет`
                        // Текст подсказки с детальной информацией когда есть данные
                        : `${title}: выполнено ${completed}, в работе ${inWork}, просрочено ${failed}`
                }
            />
            {/* Список легенды (подписей к диаграмме) */}
            <ul
                // Применение CSS-класса legend из модуля стилей
                className={s.legend}
                // Скрытие элемента от скринридеров (дублирует информацию из title)
                aria-hidden
            >
                {/* Пункт легенды для завершенных задач */}
                <li>
                    {/* Цветной индикатор для завершенных задач */}
                    <i className={s.iOk} />
                    {/* Текст подписи с количеством */}
                    Выполнено {completed}
                </li>
                {/* Пункт легенды для задач в работе */}
                <li>
                    {/* Цветной индикатор для задач в работе */}
                    <i className={s.iWarn} />
                    {/* Текст подписи с количеством */}
                    В работе {inWork}
                </li>
                {/* Пункт легенды для просроченных задач */}
                <li>
                    {/* Цветной индикатор для просроченных задач */}
                    <i className={s.iBad} />
                    {/* Текст подписи с количеством */}
                    Просрочено {failed}
                </li>
            </ul>
        </div>
    );
}

/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import s from "./ChartDonut.module.scss";
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className

2. type Props - определение типа для пропсов компонента:
   - completed, inWork, failed - обязательные числовые свойства
   - size - необязательное свойство с значением по умолчанию 96
   - title - необязательное свойство с значением по умолчанию "Диаграмма"

3. Деструктуризация пропсов с значениями по умолчанию:
   - size = 96 - если пропс не передан, используется 96px
   - title = "Диаграмма" - если заголовок не передан, используется "Диаграмма"

4. const total = Math.max(0, completed + inWork + failed);
   - Вычисление общего количества задач
   - Math.max(0, ...) гарантирует, что total не будет отрицательным

5. const isZero = total === 0;
   - Флаг, указывающий на отсутствие данных
   - Используется для условного рендеринга и стилизации

6. Вычисление углов для круговой диаграммы:
   - const a = (completed / total) * 360 - угол для завершенных задач
   - const b = ((completed + inWork) / total) * 360 - угол для завершенных + в работе
   - Умножение на 360 преобразует долю в градусы круга

7. conic-gradient логика:
   - conic-gradient создает круговой градиент
   - Синтаксис: color start-angle end-angle
   - var(--ok), var(--warn), var(--bad) - CSS-переменные из SCSS
   - При a=120deg, b=240deg: зеленый от 0 до 120°, желтый от 0 до 240°, красный от 0 до 360°

8. Атрибуты доступности:
   - aria-label={title} - метка для скринридеров
   - aria-hidden - скрывает легенду от скринридеров (информация дублируется в title)
   - title - всплывающая подсказка с детальной информацией

9. Структура легенды:
   - <ul> с классом s.legend - список легенды
   - Каждый <li> содержит <i> с цветным индикатором и текстовую подпись
   - Текст на русском языке с отображением количества

10. Inline-стили через style attribute:
    - width: size, height: size - динамический размер из пропса
    - background - условный градиент в зависимости от наличия данных

11. Обработка крайних случаев:
    - Защита от деления на ноль через isZero проверку
    - Единообразное отображение когда данных нет (серый круг)
    - Math.max(0, ...) предотвращает отрицательные значения

12. Пользовательский опыт:
    - Визуальная круговая диаграмма с цветовым кодированием
    - Подробная легенда с количественными показателями
    - Всплывающие подсказки при наведении на диаграмму
    - Адаптивный размер через пропс size

13. Особенности conic-gradient:
    - Создает секторную диаграмму без использования SVG
    - CSS-переменные обеспечивают гибкость цветовой схемы
    - Градиент начинается с 0deg и рисуется по часовой стрелке
*/
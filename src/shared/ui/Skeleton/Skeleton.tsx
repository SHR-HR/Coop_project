// Импорт стилей из файла Skeleton.module.scss с псевдонимом s для удобства обращения
import s from "./Skeleton.module.scss";

// Определение типа Props для пропсов (свойств) компонента Skeleton
type Props = {
    // lines - необязательное свойство, количество строк-скелетонов для отображения
    lines?: number;     // сколько строк-заглушек
    // height - необязательное свойство, высота каждой строки в пикселях
    height?: number;    // высота строки в px
    // rounded - необязательное свойство, определяет наличие скругленных углов у строк
    rounded?: boolean;  // скругление
};

// Объявление функционального компонента Skeleton с деструктуризацией пропсов и значениями по умолчанию
export default function Skeleton({
    // lines - количество строк, по умолчанию 3
    lines = 3,
    // height - высота строки, по умолчанию 14 пикселей
    height = 14,
    // rounded - скругление углов, по умолчанию true (включено)
    rounded = true
}: Props) {
    // Возвращение JSX-разметки компонента скелетона
    return (
        // Основной контейнер для всех строк скелетона
        <div
            // Применение CSS-класса block из модуля стилей
            className={s.block}
            // ARIA-атрибут для скрытия элемента от скринридеров (вспомогательные технологии)
            // Скелетон - чисто визуальный элемент, не несет смысловой нагрузки
            aria-hidden
        >
            {/* 
                Создание массива указанной длины (lines) и маппинг каждого элемента в строку скелетона
                Array.from({ length: lines }) создает массив из lines элементов
                .map((_, i)) проходит по каждому элементу, где i - индекс элемента
            */}
            {Array.from({ length: lines }).map((_, i) => (
                // Отдельная строка скелетона
                <div
                    // Уникальный ключ для React, основанный на индексе массива
                    // Важно для эффективного обновления Virtual DOM
                    key={i}
                    // Динамическое формирование классов: 
                    // - s.line всегда применяется (базовый класс строки)
                    // - s.rounded применяется только если rounded = true
                    className={`${s.line} ${rounded ? s.rounded : ""}`}
                    // Inline-стиль для установки высоты строки из пропса height
                    style={{ height }}
                />
            ))}
        </div>
    );
}

/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import s from "./Skeleton.module.scss";
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className
   - CSS Modules обеспечивают локальную область видимости стилей

2. type Props - определение типа для пропсов компонента:
   - lines?: number - необязательное свойство для количества строк
   - height?: number - необязательное свойство для высоты строк в пикселях
   - rounded?: boolean - необязательное свойство для скругления углов
   - Все свойства необязательные (?) со значениями по умолчанию

3. Деструктуризация пропсов с значениями по умолчанию:
   - lines = 3 - если не указано, отображается 3 строки
   - height = 14 - если не указано, высота строки 14px
   - rounded = true - если не указано, скругление включено

4. Array.from({ length: lines }) - создание массива:
   - Создает массив с указанным количеством элементов (lines)
   - Элементы будут иметь значение undefined, но это не важно для нашего случая
   - Альтернатива: Array(lines).fill(null) или [...Array(lines)]

5. .map((_, i) => ...) - преобразование массива в JSX элементы:
   - _ - первый параметр (не используется, заменен на подчеркивание)
   - i - второй параметр, индекс элемента в массиве (0, 1, 2, ...)
   - Для каждого элемента создается div с уникальным key

6. key={i} - важность ключей в React:
   - Помогает React эффективно обновлять и перерисовывать компоненты
   - В данном случае индекс массива подходит как ключ, так как порядок фиксирован
   - Для динамических данных лучше использовать уникальные ID

7. Динамические классы через шаблонную строку:
   - `${s.line} ${rounded ? s.rounded : ""}`
   - s.line - базовый класс применяется всегда
   - rounded ? s.rounded : "" - условное добавление класса скругления
   - Если rounded = true, добавляется s.rounded, иначе пустая строка

8. Inline-стиль через style attribute:
   - style={{ height }} - сокращенная запись для style={{ height: height }}
   - height берется из пропса height
   - Значение автоматически преобразуется в пиксели (14 -> "14px")

9. aria-hidden="true" - атрибут доступности:
   - Скрывает элемент от скринридеров и вспомогательных технологий
   - Скелетон - чисто декоративный элемент во время загрузки
   - Не должен мешать навигации или пониманию контента

10. Структура компонента:
    - Внешний div с классом .block (CSS Grid контейнер)
    - Внутри lines количество div с классами .line (и опционально .rounded)
    - Каждая линия получает высоту через inline-стиль

11. Предполагаемое использование:
    - Отображение во время загрузки данных
    - Замена реального контента пока он не готов
    - Создание визуальной структуры ожидаемого контента

12. CSS анимация (определена в SCSS модуле):
    - .line имеет анимацию shimmer для эффекта "мерцания"
    - Градиент движется слева направо, создавая иллюзию загрузки
    - .rounded добавляет скругленные углы для лучшего внешнего вида

13. Гибкость компонента:
    - Можно легко настроить количество строк под разный контент
    - Высота настраивается для разных типов элементов (текст, заголовки, карточки)
    - Скругление можно отключить для angular дизайна

14. Производительность:
    - Легковесный компонент без сложной логики
    - CSS анимация хорошо оптимизирована браузерами
    - Не требует внешних зависимостей или тяжелых вычислений
*/
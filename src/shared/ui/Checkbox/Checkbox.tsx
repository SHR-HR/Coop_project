// Импорт стилей из файла Checkbox.module.scss с псевдонимом s для удобства обращения
import s from "./Checkbox.module.scss"

// Определение интерфейса (типов) для пропсов (свойств) компонента Checkbox
interface CheckboxProps {
  // checked - текущее состояние чекбокса (отмечен/не отмечен)
  checked: boolean
  // onChange - функция-обработчик изменения состояния чекбокса
  onChange: (value: boolean) => void
  // label - необязательный текст метки чекбокса
  label?: string
  // disabled - необязательное свойство, отключающее чекбокс
  disabled?: boolean
  // error - необязательное свойство, указывающее на состояние ошибки
  error?: boolean
  // success - необязательное свойство, указывающее на состояние успеха
  success?: boolean
  // className - необязательное свойство для дополнительных CSS-классов
  className?: string
}

// Объявление функционального компонента Checkbox с деструктуризацией пропсов
function Checkbox({
  // checked - текущее состояние чекбокса, обязательный пропс
  checked,
  // onChange - функция обработки изменения, обязательный пропс
  onChange,
  // label - текст метки, по умолчанию undefined
  label,
  // disabled - состояние отключения, по умолчанию undefined (false)
  disabled,
  // error - состояние ошибки, по умолчанию undefined (false)
  error,
  // success - состояние успеха, по умолчанию undefined (false)
  success,
  // className - дополнительные CSS-классы, по умолчанию undefined
  className,
}: CheckboxProps) {
  // Функция-обработчик переключения состояния чекбокса
  const handleToggle = () => {
    // Проверка, что чекбокс не отключен, перед вызовом onChange
    if (!disabled) onChange(!checked)
  }

  // Возвращение JSX-разметки компонента чекбокса
  return (
    // Элемент label, который оборачивает весь чекбокс
    // Динамическое формирование классов через шаблонные строки
    <label className={`${s.wrapper} ${className || ""} ${disabled ? s.disabled : ""}`}>
      {/* Скрытый нативный input элемент типа checkbox */}
      <input
        // Тип элемента - checkbox
        type="checkbox"
        // Текущее состояние чекбокса (связывание с пропсом checked)
        checked={checked}
        // Обработчик события изменения состояния
        onChange={handleToggle}
        // Состояние отключения элемента
        disabled={disabled}
        // Применение CSS-класса для скрытия нативного input
        className={s.input}
      />
      {/* Кастомный визуальный элемент чекбокса (замена нативного) */}
      <span
        // Динамическое формирование классов для кастомного чекбокса
        className={`${s.box} ${disabled ? s.disabled : ""} ${checked ? s.checked : ""} ${
          // Условное добавление класса error или success (приоритет error)
          error ? s.error : success ? s.success : ""
          }`}
      />
      {/* Условный рендеринг текстовой метки, если она передана */}
      {label && <span className={s.label}>{label}</span>}
    </label>
  )
}

// Экспорт компонента Checkbox по умолчанию для использования в других файлах
export default Checkbox




/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import s from "./Checkbox.module.scss"
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className
   - CSS Modules обеспечивают локальную область видимости стилей

2. interface CheckboxProps
   - TypeScript интерфейс для типизации пропсов компонента
   - checked и onChange - обязательные свойства
   - label, disabled, error, success, className - необязательные свойства (?)

3. Деструктуризация пропсов в параметрах функции
   - Позволяет сразу извлекать свойства из объекта props
   - Упрощает чтение и использование пропсов в компоненте

4. const handleToggle = () => { ... }
   - Функция-обработчик клика по чекбоксу
   - Проверяет !disabled перед вызовом onChange
   - Передает противоположное значение текущего checked (!checked)

5. Структура JSX-разметки:
   - <label> - основной контейнер, связывающий input и визуальное представление
   - <input type="checkbox"> - скрытый нативный элемент для семантики и доступности
   - <span> - кастомный визуальный элемент чекбокса
   - Условный <span> для метки - рендерится только если передан label

6. Динамические классы через шаблонные строки:
   - `${s.wrapper} ${className || ""} ${disabled ? s.disabled : ""}`
   - className || "" - безопасное добавление внешних классов
   - disabled ? s.disabled : "" - условное добавление класса отключения

7. Классы для кастомного .box элемента:
   - s.box - базовый класс стилей
   - disabled ? s.disabled : "" - класс отключенного состояния
   - checked ? s.checked : "" - класс отмеченного состояния
   - error ? s.error : success ? s.success : "" - приоритет error над success

8. Нативный input элемент:
   - type="checkbox" - определяет тип элемента формы
   - checked={checked} - связывание с состоянием компонента
   - onChange={handleToggle} - обработчик изменения состояния
   - disabled={disabled} - управление доступностью элемента
   - className={s.input} - применение стилей для скрытия элемента

9. Условный рендеринг метки:
   - {label && <span className={s.label}>{label}</span>}
   - Метка рендерится только если передан пропс label
   - Используется логический оператор && для условного рендеринга

10. Особенности доступности:
    - Нативный input скрыт визуально, но остается в DOM для скринридеров
    - Элемент label обеспечивает кликабельность всей области
    - Состояние disabled корректно передается в нативный input

11. Логика состояний:
    - error имеет приоритет над success в условном операторе
    - disabled блокирует вызов onChange в handleToggle
    - checked управляет визуальным отображением галочки

12. Архитектурные решения:
    - Разделение логики (handleToggle) и представления (JSX)
    - Использование CSS Modules для изоляции стилей
    - Поддержка кастомных классов через пропс className
    - Гибкая система состояний через булевы пропсы

13. Пользовательский опыт:
    - Вся область чекбокса (включая текст) кликабельна
    - Визуальная обратная связь через состояния error/success
    - Плавные переходы между состояниями через CSS transition
    - Ясная индикация отключенного состояния
*/
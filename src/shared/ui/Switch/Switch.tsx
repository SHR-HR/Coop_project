// Импорт стилей из файла Switch.module.scss с псевдонимом s для удобства обращения
import s from "./Switch.module.scss"

// Определение интерфейса (типов) для пропсов (свойств) компонента Switch
interface SwitchProps {
  // checked - текущее состояние переключателя (включен/выключен)
  checked: boolean
  // onChange - функция-обработчик изменения состояния переключателя
  onChange: (value: boolean) => void
  // variant - необязательное свойство, определяющее стилевой вариант переключателя
  variant?: "primary" | "secondary"
  // disabled - необязательное свойство, отключающее переключатель
  disabled?: boolean
  // className - необязательное свойство для дополнительных CSS-классов
  className?: string
  // label - необязательный текст метки переключателя
  label?: string
}

// Объявление функционального компонента Switch с деструктуризацией пропсов
function Switch({
  // checked - текущее состояние переключателя, обязательный пропс
  checked,
  // onChange - функция обработки изменения, обязательный пропс
  onChange,
  // variant - стилевой вариант, по умолчанию "primary"
  variant = "primary",
  // disabled - состояние отключения, по умолчанию undefined (false)
  disabled,
  // className - дополнительные CSS-классы, по умолчанию undefined
  className,
  // label - текст метки, по умолчанию undefined
  label,
}: SwitchProps) {
  // Функция-обработчик переключения состояния переключателя
  const handleToggle = () => {
    // Проверка, что переключатель не отключен, перед вызовом onChange
    if (!disabled) onChange(!checked)
  }

  // Возвращение JSX-разметки компонента переключателя
  return (
    // Элемент label, который оборачивает весь переключатель для кликабельности
    <label className={`${s.wrapper} ${disabled ? s.disabled : ""}`}>
      {/* Кнопка-переключатель с визуальным представлением */}
      <button
        // Тип кнопки - button для предотвращения отправки формы
        type="button"
        // Динамическое формирование классов для кнопки-переключателя:
        // - s.switch - базовый класс стилей переключателя
        // - s[variant] - динамический класс варианта (primary/secondary)
        // - checked ? s.on : s.off - условный класс для состояния (включен/выключен)
        // - disabled ? s.disabled : "" - условный класс для отключенного состояния
        // - className || "" - дополнительные классы из пропса
        className={`${s.switch} ${s[variant]} ${checked ? s.on : s.off} ${disabled ? s.disabled : ""
          } ${className || ""}`}
        // Обработчик клика по переключателю
        onClick={handleToggle}
        // Состояние отключения кнопки
        disabled={disabled}
      >
        {/* Визуальный элемент ползунка (движущаяся часть переключателя) */}
        <span className={s.thumb} />
      </button>
      {/* Условный рендеринг текстовой метки, если она передана */}
      {label && <span className={s.label}>{label}</span>}
    </label>
  )
}

// Экспорт компонента Switch по умолчанию для использования в других файлах
export default Switch




/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import s from "./Switch.module.scss"
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className
   - CSS Modules обеспечивают локальную область видимости стилей

2. interface SwitchProps
   - TypeScript интерфейс для типизации пропсов компонента
   - checked и onChange - обязательные свойства
   - variant, disabled, className, label - необязательные свойства (?)

3. Деструктуризация пропсов с значениями по умолчанию:
   - variant = "primary" - если вариант не указан, используется primary
   - Остальные необязательные пропсы по умолчанию undefined

4. const handleToggle = () => { ... }
   - Функция-обработчик клика по переключателю
   - Проверяет !disabled перед вызовом onChange
   - Передает противоположное значение текущего checked (!checked)

5. Структура JSX-разметки:
   - <label> - основной кликабельный элемент, связывающий переключатель и метку
   - <button type="button"> - интерактивный элемент переключателя
   - <span className={s.thumb} /> - визуальный ползунок внутри переключателя
   - Условный <span> для метки - рендерится только если передан label

6. Динамические классы через шаблонные строки:
   - Для label: `${s.wrapper} ${disabled ? s.disabled : ""}`
   - Для button: сложная комбинация из 5 возможных классов

7. Классы для кнопки-переключателя:
   - s.switch - базовые стили переключателя
   - s[variant] - динамический класс варианта (s.primary или s.secondary)
   - checked ? s.on : s.off - класс состояния (включен/выключен)
   - disabled ? s.disabled : "" - класс отключенного состояния
   - className || "" - внешние классы из пропса

8. Кнопка-переключатель:
   - type="button" - предотвращает нежелательную отправку формы
   - onClick={handleToggle} - обработчик клика
   - disabled={disabled} - управление доступностью элемента
   - Содержит визуальный ползунок <span className={s.thumb} />

9. Условный рендеринг метки:
   - {label && <span className={s.label}>{label}</span>}
   - Метка рендерится только если передан пропс label
   - Используется логический оператор && для условного рендеринга

10. Особенности доступности:
    - Элемент label обеспечивает кликабельность всей области (переключатель + текст)
    - disabled атрибут корректно передается в button элемент
    - type="button" обеспечивает правильную семантику

11. Логика взаимодействия:
    - Клик по любому месту внутри label активирует handleToggle
    - handleToggle проверяет !disabled перед вызовом onChange
    - onChange получает новое значение !checked (инвертированное состояние)

12. Визуальные состояния (управляются через CSS классы):
    - Включенное: цветной фон + ползунок справа (s.on)
    - Выключенное: серый фон + ползунок слева (s.off)
    - Primary вариант: основной цвет при включении
    - Secondary вариант: второстепенный цвет при включении
    - Отключенное: полупрозрачность + специальный курсор

13. Архитектурные решения:
    - Контролируемый компонент (управляется через пропсы checked и onChange)
    - Разделение логики (handleToggle) и представления (JSX)
    - Использование CSS Modules для изоляции стилей
    - Поддержка различных вариантов оформления через variant

14. Пользовательский опыт:
    - Вся область переключателя (включая текст) кликабельна
    - Визуальная обратная связь через анимацию перемещения ползунка
    - Плавные переходы между состояниями через CSS transition
    - Ясная индикация отключенного состояния
*/
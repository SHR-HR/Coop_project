// Импорт стилей из файла Textarea.module.scss с псевдонимом s для удобства обращения
import s from "./Textarea.module.scss"

// Определение интерфейса (типов) для пропсов (свойств) компонента Textarea
interface TextareaProps {
  // value - текущее значение текстовой области (обязательный пропс)
  value: string
  // onChange - функция-обработчик изменения значения текстовой области (обязательный пропс)
  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void
  // placeholder - необязательный текст-подсказка внутри текстовой области
  placeholder?: string
  // disabled - необязательное свойство, отключающее текстовую область
  disabled?: boolean
  // error - необязательное свойство, указывающее на состояние ошибки
  error?: boolean
  // success - необязательное свойство, указывающее на состояние успеха
  success?: boolean
  // className - необязательное свойство для дополнительных CSS-классов
  className?: string
  // required - необязательное свойство, указывающее на обязательность заполнения
  required?: boolean
}

// Объявление функционального компонента Textarea с деструктуризацией пропсов
function Textarea({
  // value - текущее значение текстовой области
  value,
  // onChange - функция обработки изменения значения
  onChange,
  // placeholder - текст-подсказка, по умолчанию undefined
  placeholder,
  // disabled - состояние отключения, по умолчанию undefined (false)
  disabled,
  // error - состояние ошибки, по умолчанию undefined (false)
  error,
  // success - состояние успеха, по умолчанию undefined (false)
  success,
  // className - дополнительные CSS-классы, по умолчанию undefined
  className,
  // required - обязательность заполнения, по умолчанию undefined (false)
  required
}: TextareaProps) {
  // Возвращение JSX-разметки компонента текстовой области
  return (
    // Нативный HTML-элемент textarea с применением всех свойств
    <textarea
      // Динамическое формирование CSS-классов через шаблонную строку:
      // - s.textarea - базовый класс стилей текстовой области (всегда применяется)
      // - disabled ? s.disabled : "" - условное добавление класса отключенного состояния
      // - error ? s.error : "" - условное добавление класса состояния ошибки
      // - success ? s.success : "" - условное добавление класса состояния успеха
      // - className || "" - добавление дополнительных классов из пропса (если переданы)
      className={`
        ${s.textarea}
        ${disabled ? s.disabled : ""}
        ${error ? s.error : ""}
        ${success ? s.success : ""}
        ${className || ""}
      `}
      // Текущее значение текстовой области (контролируемый компонент)
      value={value}
      // Обработчик события изменения значения (передает событие изменения)
      onChange={onChange}
      // Текст-подсказка, отображаемый когда текстовое поле пустое
      placeholder={placeholder}
      // Состояние отключения текстовой области (делает поле неактивным)
      disabled={disabled}
      // Обязательность заполнения поля (HTML5 атрибут валидации)
      required={required}
    />
  )
}

// Экспорт компонента Textarea по умолчанию для использования в других файлах
export default Textarea

/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import s from "./Textarea.module.scss"
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className
   - CSS Modules обеспечивают локальную область видимости стилей

2. interface TextareaProps
   - TypeScript интерфейс для типизации пропсов компонента
   - value и onChange - обязательные свойства (нет знака ?)
   - placeholder, disabled, error, success, className, required - необязательные свойства (?)

3. Деструктуризация пропсов в параметрах функции
   - Позволяет сразу извлекать свойства из объекта props
   - Упрощает чтение и использование пропсов в компоненте
   - Все необязательные свойства по умолчанию имеют значение undefined

4. Структура JSX-разметки:
   - <textarea> - нативный HTML-элемент для многострочного ввода текста
   - Все пропсы передаются напрямую в элемент textarea
   - Компонент не имеет собственного состояния (статистический/презентационный компонент)

5. Динамические классы через шаблонную строку:
   - Многострочная шаблонная строка для лучшей читаемости
   - Каждый класс добавляется на отдельной строке
   - s.textarea - базовый класс применяется всегда
   - Условные классы добавляются только при true значениях соответствующих пропсов

6. Логика условных классов:
   - disabled ? s.disabled : "" - класс отключения только если disabled = true
   - error ? s.error : "" - класс ошибки только если error = true
   - success ? s.success : "" - класс успеха только если success = true
   - className || "" - безопасное добавление внешних классов

7. Нативный textarea элемент:
   - value={value} - создает контролируемый компонент (значение управляется извне)
   - onChange={onChange} - обработчик изменений передает событие родительскому компоненту
   - placeholder={placeholder} - текст-подсказка для пользователя
   - disabled={disabled} - управление доступностью элемента
   - required={required} - HTML5 валидация обязательности заполнения

8. Контролируемый компонент:
   - Значение value полностью управляется родительским компонентом
   - Все изменения проходят через функцию onChange
   - React полностью контролирует состояние текстовой области

9. Особенности TypeScript:
   - React.ChangeEvent<HTMLTextAreaElement> - типизация события изменения для textarea
   - Все пропсы строго типизированы для предотвращения ошибок
   - Автодополнение в IDE при использовании компонента

10. Отсутствие локального состояния:
    - Компонент не использует useState или useRef
    - Вся логика управления состоянием делегирована родительскому компоненту
    - Делает компонент более предсказуемым и простым для тестирования

11. Архитектурные решения:
    - Простой презентационный компонент без бизнес-логики
    - Поддержка различных состояний через CSS-классы
    - Гибкая система стилизации через комбинацию классов
    - Соблюдение HTML5 стандартов для элемента textarea

12. Пользовательский опыт:
    - Визуальная обратная связь через состояния error/success
    - Подсказки через placeholder
    - Браузерная валидация через required
    - Плавные переходы между состояниями (определены в CSS)

13. Производительность:
    - Легковесный компонент без сложной логики
    - Нет лишних ре-рендеров благодаря контролируемой архитектуре
    - CSS-классы применяются эффективно через CSS Modules

14. Переиспользуемость:
    - Универсальный компонент для любых сценариев использования textarea
    - Поддержка кастомных классов через пропс className
    - Совместимость с любыми формами и валидациями
*/
// Импорт типа ReactNode из React для типизации дочерних элементов
import type { ReactNode } from "react";
// Импорт стилей из файла Tooltip.module.scss с псевдонимом s для удобства обращения
import s from "./Tooltip.module.scss";

// Определение типа Props для пропсов (свойств) компонента Tooltip
type Props = {
    // label - текст подсказки, который будет отображаться в тултипе (обязательный пропс)
    label: string;
    // className - необязательное свойство для дополнительных CSS-классов
    /** Чтобы тултип не влиял на внутреннюю разметку ребёнка */
    className?: string;
    // children - необязательные дочерние React-элементы, к которым будет привязан тултип
    children?: ReactNode;
};

// Объявление функционального компонента Tooltip с деструктуризацией пропсов
export default function Tooltip({ label, className, children }: Props) {
    // Возвращение JSX-разметки компонента тултипа
    return (
        // Элемент span-обертка, который содержит дочерний элемент и тултип
        <span
            // Динамическое формирование классов: базовый класс wrap + дополнительные классы из пропса
            className={`${s.wrap} ${className ?? ""}`}
            // Установка tabIndex={0} делает элемент фокусируемым с клавиатуры
            tabIndex={0}
        >
            {/* Отображение дочерних элементов, к которым привязан тултип */}
            {children}
            {/* Элемент тултипа (всплывающей подсказки) */}
            <span
                // Применение CSS-класса tip для стилизации тултипа
                className={s.tip}
                // ARIA-роль для обозначения элемента как всплывающей подсказки
                role="tooltip"
                // ARIA-атрибут для объявления изменений содержимого скринридерам
                aria-live="polite"
            >
                {/* Отображение текста подсказки из пропса label */}
                {label}
                {/* Элемент стрелочки тултипа (чисто декоративный) */}
                <span
                    // Применение CSS-класса arrow для стилизации стрелочки
                    className={s.arrow}
                    // Скрытие стрелочки от скринридеров (не несет смысловой нагрузки)
                    aria-hidden
                />
            </span>
        </span>
    );
}



/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import type { ReactNode } from "react";
   - Импорт только типа (не значения) ReactNode из React
   - ReactNode - универсальный тип для любых React-элементов (строки, числа, JSX, массивы и т.д.)
   - import type оптимизирует сборку, импортируя только типы, но не код

2. import s from "./Tooltip.module.scss";
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className
   - CSS Modules обеспечивают локальную область видимости стилей

3. type Props - определение типа для пропсов компонента:
   - label: string - обязательный текст подсказки
   - className?: string - необязательный пропс для дополнительных классов
   - children?: ReactNode - необязательные дочерние элементы

4. JSDoc комментарий для className:
   - Чтобы тултип не влиял на внутреннюю разметку ребёнка
- Объясняет назначение пропса className - изоляция стилей тултипа от дочерних элементов
    - Помогает другим разработчикам понять предназначение пропса

5. Деструктуризация пропсов в параметрах функции:
- Прямое извлечение label, className, children из объекта props
    - Упрощает использование свойств в компоненте

6. Основной span - контейнер(.wrap):
- className={ `${s.wrap} ${className ?? ""}` } - комбинация базового и дополнительных классов
    - ?? "" - оператор нулевого слияния, использует className если он не null / undefined, иначе пустую строку
        - tabIndex={ 0 } - делает элемент фокусируемым с клавиатуры(важно для доступности)

7. Отображение дочерних элементов:
- { children } - рендеринг переданных дочерних элементов
    - Дочерние элементы будут обернуты в span с тултипом

8. Элемент тултипа(.tip):
- className={ s.tip } - применение стилей тултипа
    - role="tooltip" - ARIA - роль для семантического обозначения всплывающей подсказки
        - aria - live="polite" - указывает скринридерам объявлять изменения содержимого вежливо(без прерывания)

9. Содержимое тултипа:
- { label } - отображение текста подсказки из пропса
    - Стрелочка.arrow - декоративный элемент, указывающий на связанный элемент

10. Элемент стрелочки(.arrow):
- className={ s.arrow } - применение стилей стрелочки
    - aria - hidden - скрывает элемент от скринридеров(чисто визуальный элемент)

11. Особенности доступности:
- tabIndex={ 0 } - обеспечивает фокусируемость с клавиатуры
    - role="tooltip" - правильная семантика для вспомогательных технологий
        - aria - live="polite" - объявление изменений содержимого для скринридеров
            - aria - hidden на стрелочке - скрывает декоративный элемент

12. Логика работы тултипа(управляется через CSS):
- По умолчанию тултип скрыт(opacity: 0)
    - При наведении(.wrap: hover.tip) или фокусе(.wrap: focus - visible.tip) тултип появляется
        - CSS transition обеспечивает плавную анимацию появления

13. Архитектурные решения:
- Компонент - обертка, который не изменяет внутреннюю структуру дочерних элементов
    - Использование span вместо div для inline - элементов
        - Разделение логики(React) и стилей(CSS) для чистоты кода

14. Пользовательский опыт:
- Подсказка появляется при наведении курсора
    - Подсказка также появляется при фокусе с клавиатуры(доступность)
        - Плавная анимация делает появление менее резким
            - Стрелочка визуально связывает тултип с элементом

15. Переиспользуемость:
- Может оборачивать любые React - элементы(кнопки, иконки, текст, изображения)
    - Поддержка кастомных классов через пропс className
        - Гибкая настройка через CSS - переменные и модификаторы

16. Производительность:
- Легковесный компонент без состояния и эффектов
    - CSS - анимации обычно хорошо оптимизированы браузерами
        - Не вызывает лишних ре - рендеров
            */
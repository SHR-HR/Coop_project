// Импорт стилей из файла Sparkline.module.scss с псевдонимом s для удобства обращения
import s from "./Sparkline.module.scss";

// Определение типа Props для пропсов (свойств) компонента Sparkline
type Props = {
    // data - массив числовых данных для построения графика (обязательный пропс)
    data: number[];
    // width - необязательная ширина SVG в пикселях
    width?: number;
    // height - необязательная высота SVG в пикселях
    height?: number;
    // strokeWidth - необязательная толщина линии графика в пикселях
    strokeWidth?: number;
    // title - необязательный заголовок для доступности (ARIA)
    title?: string;
};

// Объявление функционального компонента Sparkline с деструктуризацией пропсов
export default function Sparkline({
    // data - массив данных для графика
    data,
    // width - ширина, по умолчанию 160 пикселей
    width = 160,
    // height - высота, по умолчанию 36 пикселей
    height = 36,
    // strokeWidth - толщина линии, по умолчанию 2 пикселя
    strokeWidth = 2,
    // title - заголовок для доступности, по умолчанию undefined
    title,
}: Props) {
    // Вычисление минимального значения в данных с защитой (не менее 0)
    const min = Math.min(...data, 0);
    // Вычисление максимального значения в данных с защитой (не менее 1)
    const max = Math.max(...data, 1);
    // Вычисление шага по оси X между точками данных
    const dx = data.length > 1 ? width / (data.length - 1) : 0;

    // Генерация SVG path данных для линии графика
    const d = data
        // Преобразование каждого значения в координаты SVG path
        .map((v, i) => {
            // Вычисление координаты X (равномерное распределение по ширине)
            const x = i * dx;
            // Вычисление координаты Y (нормализация значения в диапазон высоты)
            // height - ... - инвертирование Y оси (SVG координаты начинаются сверху)
            const y = height - ((v - min) / (max - min || 1)) * height;
            // Возврат SVG path команды: M для первой точки, L для последующих
            return `${i === 0 ? "M" : "L"}${x.toFixed(2)},${y.toFixed(2)}`;
        })
        // Объединение всех команд в одну строку path данных
        .join(" ");

    // Генерация SVG path данных для залитой области под графиком
    // Добавляет команды для закрытия области: до правого нижнего угла и левого нижнего угла
    const area = data.length > 1 ? d + ` L ${width},${height} L 0,${height} Z` : "";

    // Возвращение JSX-разметки компонента спарклайна
    return (
        // SVG элемент - контейнер для графика
        <svg
            // Применение CSS-класса для SVG из модуля стилей
            className={s.svg}
            // Определение системы координат и видимой области SVG
            viewBox={`0 0 ${width} ${height}`}
            // Атрибуты ширины и высоты SVG элемента
            width={width}
            height={height}
            // ARIA-атрибут для описания графика (доступность)
            aria-label={title}
        >
            {/* Условный рендеринг залитой области: только если есть достаточно данных */}
            {area && <path d={area} className={s.area} />}
            {/* Путь для линии графика с применением стилей и толщины */}
            <path d={d} className={s.line} strokeWidth={strokeWidth} />
        </svg>
    );
}



/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import s from "./Sparkline.module.scss";
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className

2. type Props - типизация пропсов компонента:
   - data: number[] - обязательный массив числовых данных
   - width?, height?, strokeWidth? - необязательные числовые параметры с значениями по умолчанию
   - title? - необязательная строка для доступности

3. Вычисление минимального и максимального значений:
   - const min = Math.min(...data, 0) - находит минимум, но не менее 0
   - const max = Math.max(...data, 1) - находит максимум, но не менее 1
   - Защита от деления на ноль и обеспечение видимости графика

4. Вычисление шага по оси X:
   - const dx = data.length > 1 ? width / (data.length - 1) : 0
   - Равномерное распределение точек по ширине графика
   - Если только одна точка данных, шаг равен 0

5. Генерация SVG path данных для линии:
   - .map((v, i)) - преобразование каждого значения в координаты
   - x = i * dx - равномерное распределение по X
   - y = height - ((v - min) / (max - min || 1)) * height - нормализация Y
   - height - ... - инвертирование оси Y (SVG координаты начинаются сверху)
   - M - move to (первая точка), L - line to (последующие точки)

6. Генерация SVG path для области:
   - area = d + L ${width},${height} L 0,${height} Z
   - Добавляет линии до правого нижнего и левого нижнего углов
   - Z - закрывает path (возврат к начальной точке)

7. SVG элемент с атрибутами:
   - viewBox={`0 0 ${width} ${height}` - система координат от (0,0) до (width,height)
   - width={width}, height={height} - физические размеры элемента
   - aria-label={title} - описание для скринридеров

8. Условный рендеринг области:
   - {area && <path d={area} className={s.area} />}
   - Область рендерится только если есть достаточно данных (data.length > 1)

9. Path элементы:
   - <path d={area} className={s.area} /> - залитая область под графиком
   - <path d={d} className={s.line} strokeWidth={strokeWidth} /> - линия графика

10. Особенности нормализации данных:
    - (v - min) / (max - min || 1) - преобразует значение в диапазон 0-1
    - Умножение на height масштабирует к высоте графика
    - Инвертирование (height - ...) корректирует систему координат SVG

11. Математические гарантии:
    - max - min || 1 - защита от деления на ноль если min = max
    - Math.min(...data, 0) и Math.max(...data, 1) - обеспечивают видимый диапазон

12. Доступность:
    - aria-label={title} предоставляет текстовое описание для скринридеров
    - SVG семантически правильный элемент для графиков

13. Производительность:
    - Все вычисления выполняются на этапе рендера
    - SVG path эффективен для отрисовки простых графиков
    - Компактный размер компонента подходит для множественного использования

14. Гибкость компонента:
    - Настраиваемая ширина, высота и толщина линии
    - Автоматическая адаптация к любым входным данным
    - Поддержка как линий, так и залитых областей
*/
// Импорт библиотеки React для использования функциональных компонентов и JSX
import React from 'react'
// Импорт стилей из файла Button.module.scss с псевдонимом s для удобства обращения
import s from './Button.module.scss'

// Определение интерфейса (типов) для пропсов (свойств) компонента Button
interface ButtonProps {
  // children - содержимое кнопки (текст, иконки или другие React-элементы)
  children: React.ReactNode
  // onClick - необязательная функция-обработчик клика по кнопке
  onClick?: () => void
  // type - необязательное свойство, определяющее тип кнопки в форме
  type?: 'button' | 'submit' | 'reset'
  // disabled - необязательное свойство, отключающее кнопку
  disabled?: boolean
  // className - необязательное свойство для дополнительных CSS-классов
  className?: string
  // variant - необязательное свойство, определяющее стилевой вариант кнопки
  variant?: 'primary' | 'secondary' | 'danger'
}

// Объявление функционального компонента Button с деструктуризацией пропсов
function Button({
  // children - содержимое кнопки, обязательный пропс
  children,
  // onClick - функция обработки клика, по умолчанию undefined
  onClick,
  // type - тип кнопки, по умолчанию 'button'
  type = 'button',
  // disabled - состояние отключения, по умолчанию false (включена)
  disabled = false,
  // className - дополнительные CSS-классы, по умолчанию пустая строка
  className = '',
  // variant - стилевой вариант кнопки, по умолчанию 'primary'
  variant = 'primary'
}: ButtonProps) {
  // Формирование строки CSS-классов для кнопки
  // Объединение базового класса wrapper, класса варианта и дополнительных классов
  // Метод trim() удаляет возможные лишние пробелы в начале и конце строки
  const buttonClasses = `${s.wrapper} ${s[variant]} ${className}`.trim()

  // Возвращение JSX-разметки компонента кнопки
  return (
    // Элемент button с применением всех свойств
    <button
      // Применение сформированных CSS-классов
      className={buttonClasses}
      // Обработчик события клика
      onClick={onClick}
      // Тип кнопки для форм
      type={type}
      // Состояние отключения кнопки
      disabled={disabled}
    >
      {/* Отображение содержимого кнопки (children) */}
      {children}
    </button>
  )
}

// Экспорт компонента Button по умолчанию для использования в других файлах
export default Button





/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import React from 'react'
   - Обязательный импорт для работы с React компонентами и JSX
   - React необходим даже если не используется напрямую в коде

2. import s from './Button.module.scss'
   - Импорт CSS Modules стилей из файла Button.module.scss
   - Псевдоним 's' позволяет обращаться к классам как s.className
   - CSS Modules обеспечивают локальную область видимости стилей

3. interface ButtonProps
   - TypeScript интерфейс для типизации пропсов компонента
   - Обеспечивает проверку типов во время разработки
   - Все свойства кроме children являются необязательными (?)

4. React.ReactNode
   - Тип для children, который может принимать любой React-элемент:
     строки, числа, JSX-элементы, массивы, фрагменты и т.д.

5. Деструктуризация пропсов в параметрах функции
   - Позволяет сразу извлекать свойства из объекта props
   - Значения по умолчанию задаются через = value
   - Упрощает чтение и использование пропсов в компоненте

6. const buttonClasses = `${s.wrapper} ${s[variant]} ${className}`.trim()
   - Шаблонная строка для динамического формирования классов
   - s.wrapper - базовый класс из CSS Modules
   - s[variant] - динамический класс варианта (primary/secondary/danger)
   - className - дополнительные классы извне компонента
   - trim() - очистка от лишних пробелов

7. JSX-разметка компонента
   - <button> - нативный HTML-элемент кнопки
   - Все пропсы передаются напрямую в элемент button
   - {children} - рендеринг содержимого между тегами кнопки

8. Экспорт компонента
   - export default Button - стандартный экспорт для импорта без фигурных скобок
   - Позволяет импортировать компонент как import Button from './Button'

9. Особенности TypeScript в компоненте:
   - Типизация пропсов предотвращает ошибки при использовании компонента
   - Автодополнение в IDE при работе с компонентом
   - Проверка обязательных и необязательных свойств

10. Архитектурные решения:
    - Компонент следует принципам переиспользуемости
    - Поддержка различных типов кнопок (button, submit, reset)
    - Гибкая система стилизации через variant и className
    - Состояние disabled для управления доступностью
*/
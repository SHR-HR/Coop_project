// Импорт стилей из файла ChartBars.module.scss с псевдонимом s для удобства обращения
import s from "./ChartBars.module.scss";

// Определение типа Props для пропсов (свойств) компонента ChartBars
type Props = {
    // completed - количество завершенных задач
    completed: number;
    // inWork - количество задач в работе
    inWork: number;
    // failed - количество проваленных/просроченных задач
    failed: number;
};

// Объявление функционального компонента ChartBars с деструктуризацией пропсов
export default function ChartBars({ completed, inWork, failed }: Props) {
    // Вычисление общего количества задач с защитой от деления на ноль
    // Math.max(1, ...) гарантирует, что total будет не менее 1
    const total = Math.max(1, completed + inWork + failed);

    // Вычисление процентной доли завершенных задач от общего количества
    const p1 = (completed / total) * 100;

    // Вычисление процентной доли задач в работе от общего количества
    const p2 = (inWork / total) * 100;

    // Вычисление процентной доли проваленных задач от общего количества
    const p3 = (failed / total) * 100;

    // Возвращение JSX-разметки компонента
    return (
        // Основной контейнер с классом root и всплывающей подсказкой
        <div
            // Применение CSS-класса root из модуля стилей
            className={s.root}
            // Всплывающая подсказка с детальной информацией о количестве задач
            title={`Вып: ${completed} • В раб: ${inWork} • Проср: ${failed}`}
        >
            {/* Элемент для отображения доли завершенных задач */}
            <span
                // Применение CSS-класса completed (зеленый цвет)
                className={s.completed}
                // Динамическая установка ширины в процентах через inline-стиль
                style={{ width: `${p1}%` }}
            />
            {/* Элемент для отображения доли задач в работе */}
            <span
                // Применение CSS-класса inWork (желтый цвет)
                className={s.inWork}
                // Динамическая установка ширины в процентах через inline-стиль
                style={{ width: `${p2}%` }}
            />
            {/* Элемент для отображения доли проваленных задач */}
            <span
                // Применение CSS-класса failed (красный цвет)
                className={s.failed}
                // Динамическая установка ширины в процентах через inline-стиль
                style={{ width: `${p3}%` }}
            />
        </div>
    );
}

/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import s from "./ChartBars.module.scss";
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className
   - CSS Modules обеспечивают локальную область видимости стилей

2. type Props - определение типа для пропсов компонента:
   - completed: number - обязательное числовое свойство для завершенных задач
   - inWork: number - обязательное числовое свойство для задач в работе
   - failed: number - обязательное числовое свойство для проваленных задач
   - Все свойства обязательные (нет знака ?)

3. Деструктуризация пропсов в параметрах функции:
   - Прямое извлечение completed, inWork, failed из объекта props
   - Упрощает использование свойств в компоненте

4. const total = Math.max(1, completed + inWork + failed);
   - Вычисление общего количества задач
   - Math.max(1, ...) - защита от деления на ноль
   - Если сумма всех задач равна 0, total будет равен 1

5. Вычисление процентных долей:
   - p1 = (completed / total) * 100 - процент завершенных задач
   - p2 = (inWork / total) * 100 - процент задач в работе
   - p3 = (failed / total) * 100 - процент проваленных задач
   - Сумма p1 + p2 + p3 всегда равна 100% (при округлении)

6. Атрибут title в div:
   - Создает всплывающую подсказку при наведении курсора
   - Текст: "Вып: X • В раб: Y • Проср: Z"
   - Символ • используется как разделитель для лучшей читаемости

7. Структура JSX:
   - <div className={s.root}> - основной контейнер
   - Три <span> элемента внутри, каждый представляет одну категорию
   - Каждый span получает соответствующий класс и динамическую ширину

8. Inline-стили через style attribute:
   - style={{ width: `${p1}%` }} - шаблонная строка для установки ширины
   - Фигурные скобки: внешние для JSX выражения, внутренние для объекта стилей
   - Ширина устанавливается в процентах от ширины родительского контейнера

9. Семантика элементов:
   - <span> используется для инлайновых элементов без семантического значения
   - Подходит для декоративных элементов визуализации

10. Логика компонента:
    - Визуализирует распределение задач по трем категориям
    - Каждая категория представлена цветной полосой пропорциональной ширины
    - Полосы расположены горизонтально и занимают 100% ширины контейнера

11. Особенности вычислений:
    - Проценты вычисляются относительно общего количества задач
    - Защита от деления на ноль через Math.max(1, ...)
    - Компонент работает даже когда все значения равны 0

12. Пользовательский опыт:
    - Визуальная индикация распределения задач
    - Подробная информация в tooltip при наведении
    - Цветовая кодировка для быстрого понимания статусов
*/
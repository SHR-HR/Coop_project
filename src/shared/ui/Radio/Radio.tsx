// Импорт стилей из файла Radio.module.scss с псевдонимом s для удобства обращения
import s from "./Radio.module.scss"

// Определение интерфейса (типов) для пропсов (свойств) компонента Radio
interface RadioProps {
  // checked - текущее состояние радио-кнопки (выбрана/не выбрана)
  checked: boolean
  // onChange - функция-обработчик изменения состояния радио-кнопки
  onChange: () => void
  // label - необязательный текст метки радио-кнопки
  label?: string
  // disabled - необязательное свойство, отключающее радио-кнопку
  disabled?: boolean
}

// Объявление функционального компонента Radio с деструктуризацией пропсов
function Radio({ checked, onChange, label, disabled }: RadioProps) {
  // Возвращение JSX-разметки компонента радио-кнопки
  return (
    // Основной контейнер div для радио-кнопки
    <div>
      {/* Элемент label, который оборачивает всю радио-кнопку для кликабельности */}
      <label className={`${s.wrapper} ${disabled ? s.disabled : ""}`}>
        {/* Скрытый нативный input элемент типа radio */}
        <input
          // Тип элемента - radio (радио-кнопка)
          type="radio"
          // Текущее состояние радио-кнопки (связывание с пропсом checked)
          checked={checked}
          // Обработчик события изменения состояния
          onChange={onChange}
          // Состояние отключения элемента
          disabled={disabled}
        />
        {/* Кастомный визуальный элемент радио-кнопки (замена нативного) */}
        <span className={`${s.circle} ${checked ? s.checked : ""} ${disabled ? s.disabled : ""}`}>
          {/* Условный рендеринг внутренней точки: отображается только если checked = true */}
          {checked && <span className={s.dot} />}
        </span>
        {/* Условный рендеринг текстовой метки, если она передана */}
        {label && <span className={s.label}>{label}</span>}
      </label>
    </div>
  )
}

// Экспорт компонента Radio по умолчанию для использования в других файлах
export default Radio



/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. import s from "./Radio.module.scss"
   - Импорт CSS Modules стилей из соседнего файла
   - Псевдоним 's' позволяет обращаться к классам как s.className
   - CSS Modules обеспечивают локальную область видимости стилей

2. interface RadioProps
   - TypeScript интерфейс для типизации пропсов компонента
   - checked и onChange - обязательные свойства
   - label и disabled - необязательные свойства (?)

3. Деструктуризация пропсов в параметрах функции
   - Позволяет сразу извлекать свойства из объекта props
   - Упрощает чтение и использование пропсов в компоненте

4. Структура JSX-разметки:
   - <div> - внешний контейнер для радио-кнопки
   - <label> - основной кликабельный элемент, связывающий input и визуальное представление
   - <input type="radio"> - скрытый нативный элемент для семантики и доступности
   - <span> с классом .circle - кастомный визуальный элемент радио-кнопки
   - Условный <span> с классом .dot - внутренняя точка для выбранного состояния
   - Условный <span> с классом .label - текстовое описание

5. Динамические классы через шаблонные строки:
   - `${s.wrapper} ${disabled ? s.disabled : ""}` - классы для label
   - `${s.circle} ${checked ? s.checked : ""} ${disabled ? s.disabled : ""}` - классы для визуального круга

6. Нативный input элемент:
   - type="radio" - определяет тип элемента как радио-кнопку
   - checked={checked} - связывание с состоянием компонента
   - onChange={onChange} - обработчик изменения состояния
   - disabled={disabled} - управление доступностью элемента
   - Элемент скрыт через CSS (display: none) но остается функциональным

7. Кастомный визуальный элемент (.circle):
   - Базовый класс s.circle всегда применяется
   - s.checked добавляется когда checked = true (меняет цвет границы)
   - s.disabled добавляется когда disabled = true (меняет цвета на серые)

8. Условный рендеринг внутренней точки:
   - {checked && <span className={s.dot} />}
   - Точка отображается только когда радио-кнопка выбрана (checked = true)
   - Логический оператор && используется для условного рендеринга

9. Условный рендеринг метки:
   - {label && <span className={s.label}>{label}</span>}
   - Метка рендерится только если передан пропс label
   - Используется логический оператор && для условного рендеринга

10. Особенности доступности:
    - Нативный input скрыт визуально, но остается в DOM для скринридеров
    - Элемент label обеспечивает кликабельность всей области
    - Состояние disabled корректно передается в нативный input
    - Семантика радио-кнопки сохраняется для вспомогательных технологий

11. Логика взаимодействия:
    - Клик по любому месту внутри label активирует onChange
    - Состояние checked управляет визуальным отображением точки
    - disabled блокирует все взаимодействия с компонентом

12. Визуальные состояния:
    - Нормальное: серая рамка, без точки
    - Выбранное: цветная рамка + цветная точка внутри
    - Отключенное: серые цвета, полупрозрачность, курсор not-allowed

13. Архитектурные решения:
    - Контролируемый компонент (управляется через пропсы checked и onChange)
    - Разделение логики (onChange) и представления (JSX)
    - Использование CSS Modules для изоляции стилей
    - Поддержка отключенного состояния через пропс disabled

14. Пользовательский опыт:
    - Вся область радио-кнопки (включая текст) кликабельна
    - Визуальная обратная связь при выборе/отмене выбора
    - Плавные переходы между состояниями через CSS transition
    - Ясная индикация отключенного состояния
*/
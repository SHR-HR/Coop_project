// Импорт типа UserStatistic для типизации данных пользователя
import type { UserStatistic } from "../types/types";

/**
 * Функция для экспорта статистики пользователей в JSON файл
 * Экспортирует статистику пользователей в JSON-файл.
 * Форматируем поля, добавляем total и doneRate.
 * JSON формат удобен для дальнейшей обработки данных, анализа или импорта в другие системы
 */
// Функция принимает массив статистики пользователей и опциональное базовое имя файла
export function exportUsersStatToJSON(
    items: UserStatistic[],           // Массив данных статистики пользователей для экспорта
    filenameBase = "dashboard_stats"  // Базовое имя файла, по умолчанию "dashboard_stats"
) {
    // Преобразование исходных данных в формат для экспорта
    // Array.map создает новый массив с дополнительными вычисляемыми полями
    const payload = items.map((u) => {
        // Вычисление общего количества задач пользователя
        // Сумма выполненных, в работе и просроченных задач
        const total = u.completedTasks + u.inWorkTasks + u.failedTasks;
        // Вычисление процента выполненных задач
        // Math.round округляет до целого числа, защита от деления на ноль
        const doneRate = total ? Math.round((u.completedTasks / total) * 100) : 0;
        // Возврат объекта с преобразованными данными пользователя
        return {
            id: u.id,                         // ID пользователя (сохраняется из исходных данных)
            name: u.name,                     // Имя пользователя (сохраняется из исходных данных)
            completed: u.completedTasks,      // Количество выполненных задач
            inWork: u.inWorkTasks,            // Количество задач в работе
            failed: u.failedTasks,            // Количество просроченных задач
            total,                            // Общее количество задач (вычисленное)
            doneRate,                         // Процент выполненных задач (вычисленный)
            ava: u.ava ?? null,               // Аватар пользователя или null если отсутствует
        };
    });

    // Преобразование данных в JSON строку с форматированием
    // JSON.stringify создает читабельный JSON с отступами
    const json = JSON.stringify(
        {
            generatedAt: new Date().toISOString(),  // Временная метка генерации файла в ISO формате
            items: payload                          // Массив преобразованных данных пользователей
        },
        null,   // Функция замены (null - без изменений)
        2       // Количество пробелов для отступов (2 для читаемости)
    );

    // Создание временной метки для имени файла
    // new Date().toISOString() - текущая дата и время в формате ISO (2023-12-31T23:59:59.999Z)
    // .replace(/[:]/g, "-") - замена всех двоеточий на дефисы (недопустимы в именах файлов Windows)
    // .slice(0, 19) - обрезка до формата YYYY-MM-DDTHH-mm-ss (убираем миллисекунды и Z)
    const ts = new Date().toISOString().replace(/[:]/g, "-").slice(0, 19);

    // Создание Blob объекта для JSON данных
    // Blob (Binary Large Object) представляет собой файлоподобный объект с необработанными данными
    const blob = new Blob([json], { type: "application/json;charset=utf-8" });
    // type: "application/json;charset=utf-8" - MIME тип указывает что это JSON с кодировкой UTF-8

    // Создание временного URL для доступа к Blob объекту
    // URL.createObjectURL создает уникальный URL который указывает на Blob
    const url = URL.createObjectURL(blob);

    // Создание временного элемента ссылки для скачивания
    const a = document.createElement("a");
    a.href = url;                                   // Установка URL на Blob объект
    a.download = `${filenameBase}_${ts}.json`;      // Имя файла для скачивания
    a.style.display = "none";                       // Скрытие элемента (не отображается на странице)

    // Добавление ссылки в DOM (Document Object Model)
    document.body.appendChild(a);
    // Программное нажатие на ссылку для запуска скачивания
    a.click();
    // Удаление ссылки из DOM после скачивания
    document.body.removeChild(a);

    // Освобождение памяти занятой временным URL
    // URL.revokeObjectURL удаляет ссылку и освобождает ресурсы
    URL.revokeObjectURL(url);
}

// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

// 1. ПРЕОБРАЗОВАНИЕ ДАННЫХ:
//    - Добавление вычисляемых полей total и doneRate к каждому пользователю
//    - total = completed + inWork + failed (общее количество задач)
//    - doneRate = (completed / total) * 100 (процент выполненных задач)
//    - Нормализация поля ava с использованием ?? null для обработки undefined

// 2. JSON СТРУКТУРА:
//    - Внешний объект содержит метаданные и массив items
//    - generatedAt: временная метка создания файла в ISO формате
//    - items: массив объектов с данными пользователей
//    - Форматирование с отступами в 2 пробела для читаемости

// 3. ВЫЧИСЛЕНИЯ И ОБРАБОТКА ДАННЫХ:
//    - Защита от деления на ноль при расчете doneRate
//    - Округление процентов до целых чисел (Math.round)
//    - Сохранение всех исходных полей плюс добавление вычисляемых

// 4. РАБОТА С ФАЙЛАМИ:
//    - Blob объект для представления JSON данных как файла
//    - MIME type "application/json;charset=utf-8" для корректного определения типа
//    - URL.createObjectURL создает временную ссылку на файл в памяти

// 5. ФОРМИРОВАНИЕ ИМЕНИ ФАЙЛА:
//    - filenameBase: базовая часть имени (по умолчанию "dashboard_stats")
//    - Временная метка в формате YYYY-MM-DDTHH-mm-ss для уникальности
//    - Замена двоеточий на дефисы для совместимости с файловыми системами
//    - Расширение .json указывает на формат файла

// 6. МЕХАНИЗМ СКАЧИВАНИЯ:
//    - Создание временного элемента <a> (ссылки) в памяти
//    - Установка атрибутов href (на Blob URL) и download (имя файла)
//    - Добавление ссылки в DOM, программный клик и немедленное удаление
//    - Автоматическое скачивание файла браузером

// 7. УПРАВЛЕНИЕ ПАМЯТЬЮ:
//    - URL.revokeObjectURL освобождает память занятую временным URL
//    - Удаление временного элемента из DOM предотвращает утечки памяти
//    - Blob объект автоматически очищается сборщиком мусора

// 8. ОБРАБОТКА ГРАНИЧНЫХ СЛУЧАЕВ:
//    - Значение по умолчанию для filenameBase
//    - Обработка возможного отсутствия аватара (u.ava ?? null)
//    - Защита от деления на ноль при расчете процентов
//    - Корректная обработка специальных символов в именах

// 9. ПРЕИМУЩЕСТВА JSON ЭКСПОРТА:
//    - Структурированные данные удобны для программной обработки
//    - Поддержка вложенных объектов и массивов
//    - Читаемость для человека и машины
//    - Широкая поддержка в различных языках программирования

// 10. ИСПОЛЬЗОВАНИЕ:
//     - Анализ данных в сторонних инструментах
//     - Создание резервных копий статистики
//     - Интеграция с другими системами отчетности
//     - Долгосрочное хранение исторических данных
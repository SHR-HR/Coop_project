// Файл с TypeScript интерфейсами для типизации данных во всем приложении
// Определяет структуры данных которые используются в Redux store, API вызовах и компонентах

// Интерфейс для представления пользователя в системе
export interface User {
    id: number;           // Уникальный идентификатор пользователя (числовой)
    name: string;         // Имя пользователя (строка)
    ava: string | null;   // URL аватара пользователя или null если аватар отсутствует
}

// Интерфейс для учетных данных аутентификации
export interface Credentials {
    username: string;     // Имя пользователя для входа в систему
    password: string;     // Пароль пользователя для аутентификации
}

// Интерфейс для профиля текущего пользователя
export interface Profile {
    name: string;        // Отображаемое имя пользователя
    ava: string;         // URL аватара пользователя (обязательное поле)
}

/* ДОБАВИЛОСЬ: */
// Комментарий указывает что следующие интерфейсы были добавлены позже в разработке

// Интерфейс для статистики пользователя (отображается в таблице и дашборде)
export interface UserStatistic {
    id: number;              // Уникальный идентификатор пользователя
    name: string;            // Имя пользователя
    ava: string;             // URL аватара пользователя (обязательное поле)
    completedTasks: number;  // Количество выполненных задач пользователя
    inWorkTasks: number;     // Количество задач в работе (не завершенных)
    failedTasks: number;     // Количество просроченных или проваленных задач
}

// Интерфейс для статистики текущего пользователя (упрощенная версия)
export interface MyStatistic {
    completedTasks: number;  // Количество выполненных задач текущего пользователя
    inWorkTasks: number;     // Количество задач в работе у текущего пользователя
    failedTasks: number;     // Количество просроченных задач текущего пользователя
}

// Интерфейс для представления задачи в системе
export interface Task {
    id: number;              // Уникальный идентификатор задачи
    title: string;           // Заголовок задачи (название)
    author: number;          // ID пользователя который создал задачу
    performer: number;       // ID пользователя которому назначена задача (исполнитель)
    deadline: string;        // Срок выполнения задачи в строковом формате (обычно ISO дата)
    status: string;          // Текущий статус задачи (например: "в работе", "выполнено", "просрочено")
    description: string;     // Подробное описание задачи
    result: string | null;   // Результат выполнения задачи или null если задача еще не завершена
}

// Интерфейс для данных необходимых при создании новой задачи
export interface TaskCreatePayload {
    title: string;        // Заголовок новой задачи (обязательное поле)
    description: string;  // Описание новой задачи (обязательное поле)
    performer: number;    // ID пользователя которому назначается задача (обязательное поле)
    deadline: string;     // Срок выполнения задачи в строковом формате (обязательное поле)
}



// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

// 1. СТРУКТУРА И ИЕРАРХИЯ ИНТЕРФЕЙСОВ:
//    - User: базовая информация о пользователе (id, name, ava)
//    - Credentials: данные для входа (username, password)
//    - Profile: профиль текущего пользователя (name, ava)
//    - UserStatistic: расширенная статистика для отображения в таблице
//    - MyStatistic: упрощенная статистика для текущего пользователя
//    - Task: полная информация о задаче
//    - TaskCreatePayload: минимальные данные для создания задачи

// 2. TypeScript ОСОБЕННОСТИ:
//    - string | null: поле может быть строкой или null (nullable тип)
//    - Все поля явно типизированы для строгой проверки типов
//    - Интерфейсы позволяют автоматическое наследование и расширение

// 3. СЕМАНТИКА ПОЛЕЙ:
//    - id: всегда number, уникальный идентификатор для однозначной идентификации
//    - name: отображаемое имя пользователя (может отличаться от username)
//    - ava: URL строка или null если изображение отсутствует
//    - Tasks: статистика разделена на три категории для аналитики

// 4. РАЗЛИЧИЯ МЕЖДУ ИНТЕРФЕЙСАМИ:
//    - User vs Profile: User имеет id и nullable ava, Profile без id и обязательная ava
//    - UserStatistic vs MyStatistic: UserStatistic включает id, name, ava + статистику
//    - Task vs TaskCreatePayload: Task имеет больше полей включая id и результат

// 5. ИСПОЛЬЗОВАНИЕ В ПРИЛОЖЕНИИ:
//    - Redux store: типизация состояния (statisticsSlice, authSlice)
//    - API вызовы: типизация параметров и ответов от сервера
//    - React компоненты: типизация props и state
//    - Селекторы: типизация возвращаемых данных

// 6. NULL SAFETY И ОБЯЗАТЕЛЬНЫЕ ПОЛЯ:
//    - ava в User: string | null - может отсутствовать
//    - ava в Profile: string - всегда должно быть значение
//    - result в Task: string | null - может отсутствовать пока задача не завершена
//    - Все поля в TaskCreatePayload обязательные для создания задачи

// 7. СТРОКОВЫЕ ФОРМАТЫ:
//    - deadline: string - обычно ISO формат даты (2024-01-15T10:30:00Z)
//    - status: string - предопределенные значения статусов задач
//    - name/username: string - человеко-читаемые имена

// 8. РАСШИРЯЕМОСТЬ:
//    - Интерфейсы легко расширять добавлением новых полей
//    - Можно создавать производные типы на основе этих интерфейсов
//    - Поддерживается совместимость при добавлении optional полей

// 9. СОВМЕСТИМОСТЬ С BACKEND:
//    - Интерфейсы отражают структуру данных с сервера
//    - Поля соответствуют JSON ответам API
//    - Обеспечивает типобезопасность при работе с внешними данными

// 10. BEST PRACTICES:
//     - Четкие и описательные имена интерфейсов
//     - Консистентные naming conventions
//     - Минимально необходимые поля для каждой сущности
//     - Разделение ответственности между интерфейсами
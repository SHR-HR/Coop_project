// Импорт всех переменных из файла variables.scss в папке abstracts
// Использование псевдонима * позволяет обращаться к переменным напрямую без префикса
// Переменные включают: цвета, отступы, размеры шрифтов, радиусы, тени, брейкпоинты
@use 'abstracts/variables' as*;

// Импорт стилей сброса (reset) из файла reset.scss в папке base
// Использование псевдонима * импортирует все стили без namespace
// Reset стили убирают стандартные стили браузеров для единообразного отображения
@use 'base/reset' as*;

// Импорт типографских стилей из файла typography.scss в папке base
// Использование псевдонима * импортирует все стили без namespace
// Типографские стили определяют базовые настройки шрифтов и текста для всего приложения
@use 'base/typography' as*;


/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. Назначение главного SCSS файла:
   - Точка входа для всех глобальных стилей приложения
   - Объединяет и организует импорты различных стилевых модулей
   - Создает основу для всей стилевой системы приложения

2. Структура импортов:
   - Порядок импортов имеет значение: переменные → reset → типография
   - Каждый последующий импорт может использовать переменные и стили из предыдущих

3. Директива @use:
   - Современная замена устаревшей директивы @import
   - Обеспечивает модульность и изоляцию стилей
   - Предотвращает конфликты имен и дублирование кода

4. Псевдоним as*:
   - Импортирует все содержимое модуля без необходимости использования namespace
   - Позволяет обращаться к переменным и миксинам напрямую по имени
   - Упрощает написание кода и улучшает читаемость

5. Порядок импортов и их логика:

   Первый импорт: 'abstracts/variables'
   - Переменные должны загружаться первыми, так как они используются во всех последующих файлах
   - Содержит цветовую палитру, размеры, отступы, брейкпоинты
   - Создает основу для дизайн-системы

   Второй импорт: 'base/reset'
   - Reset стили загружаются после переменных, но до типографии
   - Убирают стандартные стили браузеров, создавая чистый холст
   - Используют переменные для единообразного сброса

   Третий импорт: 'base/typography'
   - Типографские стили загружаются последними, так как они строятся на основе reset
   - Определяют базовые настройки шрифтов, которые наследуются всеми элементами
   - Используют переменные для цветов и размеров

6. Преимущества модульной структуры:
   - Четкое разделение ответственности между файлами
   - Легкость поддержки и масштабирования
   - Возможность переиспользования модулей в других проектах

7. Следование методологии ITCSS (Inverted Triangle CSS):
   - Abstracts (переменные, миксины) - самые абстрактные стили
   - Base (reset, типография) - базовые стили элементов
   - Такая структура обеспечивает предсказуемость и масштабируемость

8. Влияние на производительность:
   - Модульный подход позволяет загружать только необходимые стили
   - Улучшает кэширование браузером
   - Упрощает tree-shaking при сборке

9. Совместимость с компонентным подходом:
   - Глобальные стили устанавливают базовые правила
   - Компоненты могут переопределять эти правила при необходимости
   - Обеспечивает согласованность между компонентами

10. Расширяемость:
    - Легко добавлять новые модули стилей
    - Просто подключать дополнительные SCSS файлы
    - Возможность создания тематических вариантов

11. Отладка и разработка:
    - Четкая структура упрощает поиск и исправление проблем
    - Модульность позволяет изолировать и тестировать стили
    - Упрощает onboarding новых разработчиков

12. Best practices:
    - Порядок импортов следует логике от общих к частным стилям
    - Каждый модуль отвечает за свою конкретную задачу
    - Минимальная связанность между модулями

13. Рекомендации по развитию:
    - Добавлять новые imports в правильном порядке иерархии
    - Создавать дополнительные модули для сложных функциональных блоков
    - Сохранять принцип единой ответственности для каждого файла
*/
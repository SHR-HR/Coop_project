// Импорт библиотеки axios для выполнения HTTP-запросов
import axios from "axios";

// Определение базового URL для API запросов
// В данном случае используется локальный сервер на порту 8000
const API_URL = "http://localhost:8000";

// Создание объекта testApi, который содержит методы для работы с тестовым API
export const testApi = {
    // Асинхронный метод для проверки статуса API
    // Возвращает Promise с объектом, содержащим сообщение от сервера
    checkApiStatus: async (): Promise<{ message: string }> => {
        // Выполнение GET-запроса к корневому эндпоинту API
        // Используется axios.get с указанием ожидаемого типа данных ответа
        const response = await axios.get<{ message: string; version: string }>(API_URL);
        // Возвращение объекта с сообщением из ответа сервера
        return { message: response.data.message };
    }
}





/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:

1. НАЗНАЧЕНИЕ МОДУЛЯ:
   - testApi.ts является API-клиентом для взаимодействия с backend сервером
   - Содержит методы для выполнения HTTP-запросов к различным эндпоинтам
   - Инкапсулирует логику работы с сетью и преобразование данных

2. СТРУКТУРА API КЛИЕНТА:
   - API_URL - базовый URL для всех запросов к backend
   - testApi - объект, группирующий связанные API методы
   - Каждый метод соответствует конкретному эндпоинту API

3. МЕТОД checkApiStatus:
   - Выполняет GET-запрос к корневому URL сервера (/) 
   - Ожидает получить объект с полями message и version
   - Возвращает только message, демонстрируя преобразование данных

4. ТИПИЗАЦИЯ TypeScript:
   - Явное указание возвращаемого типа Promise<{ message: string }>
   - Указание ожидаемого типа данных ответа в axios.get<{ message: string; version: string }>
   - Это обеспечивает автодополнение и проверку типов во время разработки

5. АСИНХРОННОЕ ПРОГРАММИРОВАНИЕ:
   - Использование async/await для работы с асинхронными операциями
   - axios.get возвращает Promise, который ожидается с помощью await
   - Метод является асинхронной функцией, возвращающей Promise

6. ОБРАБОТКА ОТВЕТА:
   - response.data содержит данные, возвращенные сервером
   - Извлекается только поле message, игнорируя version
   - Это демонстрирует возможность трансформации данных на клиенте

7. ВОЗМОЖНОЕ РАСШИРЕНИЕ:
   - Модуль может быть расширен добавлением новых методов для других эндпоинтов
   - Можно добавить обработку ошибок и интерцепторы
   - Возможно добавление конфигурации axios (timeout, headers и т.д.)

8. ИСПОЛЬЗОВАНИЕ В ПРИЛОЖЕНИИ:
   - Этот модуль импортируется в Redux slice или компонентах
   - Обеспечивает разделение ответственности между UI и сетевыми запросами
   - Упрощает тестирование и мокирование API вызовов

9. БЕЗОПАСНОСТЬ И НАСТРОЙКИ:
   - В реальном приложении следует добавить обработку ошибок
   - Можно добавить базовую аутентификацию или токены
   - Рекомендуется выносить чувствительные данные в environment variables

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
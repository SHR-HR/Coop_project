// Импорт функции configureStore из Redux Toolkit для создания хранилища состояния
import { configureStore } from '@reduxjs/toolkit';
// Импорт срезов (slices) состояния из различных файлов
import { testSlice } from './slices/testSlice';
import { authSlice } from "./slices/authSlice";
import { usersSlice } from "./slices/usersSlice";
import { profileSlice } from "./slices/profileSlice";
/* ДОБАВИЛОСЬ: */
// Импорт дополнительных редюсеров для новых функциональных модулей
import statisticsReducer from "./slices/statisticsSlice";
import myTasksReducer from "./slices/myTasksSlice";
import tasksReducer from "./slices/taskAddSlice";
import { delegatedTasksSlice } from "./slices/delegatedTasksSlice";

// Конфигурация Redux store с подключенными редьюсерами
// Создание и экспорт главного хранилища состояния приложения
export const store = configureStore({
  // Объект reducer объединяет все редюсеры приложения
  reducer: {
    // Тестовый редюсер для проверки работы Redux и API
    test: testSlice.reducer,
    // Редюсер для управления состоянием аутентификации (логин, пароль, статус авторизации)
    auth: authSlice.reducer,
    // Редюсер для управления списком пользователей системы
    users: usersSlice.reducer,
    // Редюсер для управления профилем текущего пользователя
    profile: profileSlice.reducer,
    /* ДОБАВИЛОСЬ: */
    // Редюсер для управления статистикой (новый функциональный модуль)
    statistics: statisticsReducer,
    // Редюсер для управления задачами текущего пользователя
    myTasks: myTasksReducer,
    // Редюсер для управления созданием новых задач
    tasks: tasksReducer,
    // Редюсер для управления делегированными задачами (задачи, назначенные другим пользователям)
    delegatedTasks: delegatedTasksSlice.reducer,
  },
});

// Типы для TypeScript интеграции
// Тип, представляющий всё состояние приложения (возвращаемый store.getState())
export type RootState = ReturnType<typeof store.getState>
// Тип для dispatch функции хранилища (для типизации useDispatch хука)
export type AppDispatch = typeof store.dispatch


/* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

/*
1. Назначение файла store.ts:
   - Главный файл конфигурации Redux хранилища
   - Объединяет все редюсеры приложения в единое состояние
   - Экспортирует типы для TypeScript

2. Импорты:
   - configureStore - функция из Redux Toolkit для создания оптимизированного хранилища
   - Импорты срезов состояния из отдельных файлов в папке slices
   - Разные стили импорта: некоторые как именованные, некоторые как default

3. Структура хранилища (store):
   - Централизованное хранилище состояния всего приложения
   - Автоматически настраивает Redux DevTools и middleware
   - Использует Immer для иммутабельных обновлений "под капотом"

4. Объект reducer:
   - Ключи объекта соответствуют разделам (slices) состояния
   - Каждый ключ мапится на соответствующий редюсер
   - Состояние хранилища имеет структуру: { test: ..., auth: ..., users: ..., и т.д. }

5. Описание разделов состояния:

   test: 
   - Тестовый раздел для проверки работы Redux и API
   - Содержит счетчик, статус API, ошибки
   - Используется для демонстрации и отладки

   auth:
   - Управление аутентификацией пользователя
   - Хранит логин, пароль, статус авторизации
   - Обрабатывает вход/выход из системы

   users:
   - Управление списком всех пользователей системы
   - Используется для выбора пользователей при назначении задач
   - Содержит информацию о команде

   profile:
   - Управление профилем текущего пользователя
   - Хранит персональные данные, настройки
   - Обрабатывает загрузку и обновление профиля

   statistics (НОВЫЙ):
   - Управление статистическими данными
   - Содержит метрики, графики, аналитику
   - Используется для дашбордов и отчетов

   myTasks (НОВЫЙ):
   - Управление задачами текущего пользователя
   - Содержит список задач, назначенных пользователю
   - Обрабатывает операции с задачами (выполнение, обновление)

   tasks (НОВЫЙ):
   - Управление созданием новых задач
   - Содержит состояние процесса создания задачи
   - Обрабатывает валидацию и отправку данных новой задачи

   delegatedTasks (НОВЫЙ):
   - Управление делегированными задачами
   - Содержит задачи, которые пользователь назначил другим
   - Обрабатывает операции с делегированными задачами

6. Типы TypeScript:
   - RootState - автоматически выводимый тип всего состояния
   - AppDispatch - тип функции dispatch для типизации в компонентах
   - Обеспечивают полную type-safe работу с Redux

7. Масштабируемость:
   - Легко добавлять новые разделы состояния
   - Четкое разделение ответственности между редюсерами
   - Независимое развитие каждого функционального модуля

8. Redux Toolkit преимущества:
   - Упрощенная конфигурация по сравнению с vanilla Redux
   - Встроенная поддержка DevTools
   - Автоматическая настройка thunk middleware
   - Immer для упрощения иммутабельных обновлений

9. Структура состояния приложения:
   Состояние имеет следующую структуру:
   {
     test: { apiStatus, loading, error, counter },
     auth: { username, password, isAuthenticated, loading, error },
     users: { users, loading, error },
     profile: { profile, loading, error },
     statistics: { ... },
     myTasks: { items, loading, error, unauthorized },
     tasks: { tasks, loading, error },
     delegatedTasks: { tasks, loading, error }
   }

10. Использование в компонентах:
    - useSelector для доступа к состоянию
    - useDispatch для отправки действий
    - Типизированные хуки через createTypedHooks (если настроены)

11. Отладка:
    - Redux DevTools показывают все действия и изменения состояния
    - Возможность "путешествия во времени" по состоянию
    - Логирование действий для отладки

12. Производительность:
    - Разделение состояния на независимые разделы
    - Компоненты подписываются только на нужные части состояния
    - Оптимизированные обновления через Redux Toolkit
*/
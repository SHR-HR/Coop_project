// Импорт React для использования JSX и функциональных компонентов
import React from "react";
// Импорт компонента Button для кнопок из папки shared UI компонентов
import Button from "../../../shared/ui/Button/Button";
// Импорт модуля стилей из файла TaskCard.module.scss
import s from "./TaskCard.module.scss";
// Импорт типов Task и User из общих типов для TypeScript
import type { Task, User } from "../../../shared/types/types";

// Определение интерфейса для пропсов компонента TaskCard
// Интерфейс наследует все свойства типа Task и добавляет дополнительные
interface TaskCardProps extends Task {
  // Массив пользователей для отображения информации об авторе
  users: User[];
  // Функция-обработчик клика по кнопке завершения задачи
  onCompleteClick: (taskId: number) => void;
}

// Создание объекта-маппинга для статусов задач
// Record создает тип объекта с ключами из TaskCardProps["status"] и значениями указанного типа
const statusMap: Record<
  TaskCardProps["status"], // Тип ключей - все возможные статусы из TaskCardProps
  { label: string; className: string } // Тип значений - объект с меткой и именем класса
> = {
  // Маппинг статуса "in work" на русскую метку и класс стиля
  "in work": { label: "В работе", className: "inWork" },
  // Маппинг статуса "completed" на русскую метку и класс стиля
  completed: { label: "Выполнена", className: "completed" },
  // Маппинг статуса "failed" на русскую метку и класс стиля
  failed: { label: "Просрочена", className: "failed" },
};

// Объявление функционального компонента TaskCard с использованием React.FC и дженерика для типизации пропсов
const TaskCard: React.FC<TaskCardProps> = ({
  // Деструктуризация всех пропсов для удобного использования внутри компонента
  id, // Уникальный идентификатор задачи
  author, // ID автора задачи
  title, // Заголовок задачи
  description, // Описание задачи
  deadline, // Срок выполнения задачи
  status, // Текущий статус задачи
  result, // Результат выполнения задачи (может быть undefined)
  users, // Массив пользователей
  onCompleteClick, // Функция-обработчик завершения задачи
}) => {
  // Получение данных о статусе из объекта statusMap по текущему статусу задачи
  const { label, className } = statusMap[status];
  // Поиск пользователя-автора задачи в массиве users по ID
  const user = users.find((u) => u.id === Number(author));

  // Возвращаем JSX разметку компонента карточки задачи
  return (
    // Элемент списка с динамическими классами: всегда s.card и класс в зависимости от статуса
    <li className={`${s.card} ${s[className]}`}>
      {/* Верхняя панель карточки с отображением статуса */}
      <div className={s.topBar}>
        {/* Отображение текстовой метки статуса задачи */}
        <span className={s.status}>{label}</span>
      </div>

      {/* Основной контент карточки */}
      <div className={s.main}>
        <div className={s.content}>
          {/* Шапка карточки с информацией об авторе и действиями */}
          <div className={s.header}>
            {/* Условный рендеринг аватара автора, если он существует */}
            {user?.ava && <img src={user.ava} alt={user.name} className={s.avatar} />}
            {/* Отображение имени автора или заглушки, если автор не найден */}
            <span className={s.author}>{user?.name ?? "Неизвестный автор"}</span>
            {/* Условный рендеринг кнопки завершения - показываем только для незавершенных задач */}
            {status !== "completed" && (
              <div className={s.actions}>
                {/* Кнопка для завершения задачи */}
                <Button variant="primary" onClick={() => onCompleteClick(id)}>
                  Завершить
                </Button>
              </div>
            )}
          </div>

          {/* Отображение дедлайна задачи */}
          <small className={s.deadline}>Дедлайн: {deadline}</small>
          {/* Заголовок задачи */}
          <h3 className={s.title}>{title}</h3>
          {/* Условный рендеринг описания задачи, если оно существует */}
          {description && <p className={s.description}>{description}</p>}

          {/* Условный рендеринг результата выполнения, если он существует */}
          {result && <p className={s.result}>{result}</p>}
        </div>
      </div>
    </li>
  );
};

// Экспорт компонента TaskCard по умолчанию для использования в других частях приложения
export default TaskCard;



/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:

1. СТРУКТУРА КОМПОНЕНТА:
   - TaskCard является презентационным компонентом для отображения отдельной задачи
   - Компонент наследует все свойства типа Task через интерфейс TaskCardProps
   - Дополнительно принимает массив пользователей и обработчик завершения задачи

2. МАППИНГ СТАТУСОВ:
   - statusMap объект централизует преобразование статусов в читаемые метки и классы стилей
   - Использование Record типа обеспечивает типобезопасность маппинга
   - Позволяет легко добавлять новые статусы в будущем

3. ДИНАМИЧЕСКИЕ СТИЛИ:
   - Класс карточки динамически меняется в зависимости от статуса задачи
   - Это позволяет применять разные цвета и стили для разных статусов (в работе, выполнено, просрочено)

4. УСЛОВНЫЙ РЕНДЕРИНГ:
   - Кнопка "Завершить" показывается только для задач со статусом не "completed"
   - Аватар автора отображается только если ссылка на аватар существует
   - Описание и результат отображаются только если они не пустые

5. РАБОТА С ДАННЫМИ:
   - Поиск автора задачи в массиве пользователей по ID
   - Использование оператора ?? для отображения заглушки если автор не найден
   - Приведение типа author к Number для корректного сравнения

6. ПОЛЬЗОВАТЕЛЬСКИЙ ИНТЕРФЕЙС:
   - Четкая визуальная иерархия информации (статус, автор, дедлайн, заголовок, описание, результат)
   - Интерактивная кнопка для завершения задачи
   - Визуальное разделение на верхнюю панель и основной контент

7. ДОСТУПНОСТЬ:
   - Семантическая HTML разметка (li, h3, p)
   - Alt атрибут для изображения аватара
   - Логичная структура информации

8. TypeScript ТИПИЗАЦИЯ:
   - Строгая типизация всех пропсов через интерфейс
   - Использование дженериков для React.FC
   - Type guards (user?.ava) для безопасного доступа к опциональным свойствам

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
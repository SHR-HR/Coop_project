// Импорт React для использования JSX и функциональных компонентов
import React from "react";
// Импорт компонента Select для выпадающих списков из папки shared UI компонентов
import Select from "../../../shared/ui/Select/Select";
// Импорт компонента Input для полей ввода из папки shared UI компонентов
import Input from "../../../shared/ui/Input/Input";
// Импорт компонента Button для кнопок из папки shared UI компонентов
import Button from "../../../shared/ui/Button/Button";
// Импорт модуля стилей из файла TaskFilters.module.scss
import s from "./TaskFilters.module.scss";
// Импорт типа User из общих типов для TypeScript
import type { User } from "../../../shared/types/types";

// Определение интерфейса для пропсов компонента TaskFilters
interface TaskFilterProps {
  // Текущее значение фильтра по статусу (может быть строкой или null)
  statusFilter: string | null;
  // Текущее значение фильтра по дедлайну (строка в формате даты)
  deadlineFilter: string;
  // Текущее значение фильтра по автору (может быть строкой или null)
  authorFilter: string | null;
  // Текущий порядок сортировки: "asc" (по возрастанию), "desc" (по убыванию) или null (без сортировки)
  sortOrder: "asc" | "desc" | null;
  // Функция-обработчик изменения фильтра по статусу
  onStatusChange: (value: string | null) => void;
  // Функция-обработчик изменения фильтра по дедлайну
  onDeadlineChange: (value: string) => void;
  // Функция-обработчик изменения фильтра по автору
  onAuthorChange: (value: string | null) => void;
  // Функция-обработчик изменения порядка сортировки
  onSortChange: (value: "asc" | "desc" | null) => void;
  // Функция-обработчик сброса всех фильтров
  onReset: () => void;
  // Массив пользователей для фильтрации по автору
  users: User[];
}

// Объявление функционального компонента TaskFilter с использованием React.FC и дженерика для типизации пропсов
const TaskFilter: React.FC<TaskFilterProps> = ({
  // Деструктуризация пропсов для удобного использования внутри компонента
  statusFilter,
  deadlineFilter,
  authorFilter,
  sortOrder,
  onStatusChange,
  onDeadlineChange,
  onAuthorChange,
  onSortChange,
  onReset,
  users
}) => {
  // Возвращаем JSX разметку компонента фильтров
  return (
    // Основной контейнер для всех фильтров с применением стиля filterWrapper
    <div className={s.filterWrapper}>
      {/* Сетка для расположения элементов фильтров с применением стиля grid */}
      <div className={s.grid}>
        {/* Компонент Input для фильтрации по дате дедлайна */}
        <Input
          type="date" // Тип input - выбор даты
          value={deadlineFilter} // Текущее значение фильтра по дедлайну
          // Обработчик изменения значения - передает новое значение в родительский компонент
          onChange={(e) => onDeadlineChange(e.target.value)}
          placeholder="Фильтр по дедлайну" // Текст placeholder для пустого поля
          className={s.inputDate} // Дополнительный CSS класс для стилизации
        />

        {/* Компонент Select для фильтрации по статусу задачи */}
        <Select
          value={statusFilter} // Текущее выбранное значение фильтра по статусу
          onChange={onStatusChange} // Обработчик изменения выбранного статуса
          // Массив опций для выпадающего списка статусов
          options={[
            { label: "Все", value: null }, // Опция для отображения всех статусов
            { label: "В работе", value: "in work" }, // Опция для задач в работе
            { label: "Выполненные", value: "completed" }, // Опция для выполненных задач
            { label: "Просроченные", value: "failed" }, // Опция для просроченных задач
          ]}
          placeholder="Фильтр по статусу" // Текст placeholder для пустого селекта
          className={s.statusSelect} // Дополнительный CSS класс для стилизации
        />

        {/* Компонент Select для фильтрации по автору задачи */}
        <Select
          value={authorFilter} // Текущее выбранное значение фильтра по автору
          onChange={onAuthorChange} // Обработчик изменения выбранного автора
          // Массив опций для выпадающего списка авторов
          options={[
            { label: "Все авторы", value: null }, // Опция для отображения всех авторов
            // Динамическое создание опций из массива пользователей
            ...users.map(user => ({
              label: user.name, // Отображаемое имя пользователя
              value: user.id.toString() // ID пользователя как строка (значение)
            }))
          ]}
          placeholder="Фильтр по автору" // Текст placeholder для пустого селекта
          className={s.authorSelect} // Дополнительный CSS класс для стилизации
        />

        {/* Компонент Select для сортировки задач по дате */}
        <Select
          value={sortOrder} // Текущее выбранное значение порядка сортировки
          // Обработчик изменения сортировки с приведением типа к "asc" | "desc" | null
          onChange={(value) => onSortChange(value as "asc" | "desc" | null)}
          // Массив опций для выпадающего списка сортировки
          options={[
            { label: "Без сортировки", value: null }, // Опция без сортировки
            { label: "По ранним срокам", value: "asc" }, // Сортировка по возрастанию (ранние сроки сначала)
            { label: "По поздним срокам", value: "desc" }, // Сортировка по убыванию (поздние сроки сначала)
          ]}
          placeholder="Сортировка по дате" // Текст placeholder для пустого селекта
          className={s.sortSelect} // Дополнительный CSS класс для стилизации
        />
      </div>

      {/* Кнопка для сброса всех фильтров и сортировки */}
      <Button
        variant="danger" // Вариант стиля кнопки - опасное действие (красный цвет)
        onClick={onReset} // Обработчик клика - вызов функции сброса фильтров
        className={s.resetButton} // Дополнительный CSS класс для стилизации
      >
        Сбросить {/* Текст на кнопке */}
      </Button>
    </div>
  );
};

// Экспорт компонента TaskFilter по умолчанию для использования в других частях приложения
export default TaskFilter;




/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:

1. АРХИТЕКТУРА КОМПОНЕНТА:
   - TaskFilter является презентационным компонентом (dumb component)
   - Не содержит внутренней логики состояния - управляется полностью через пропсы
   - Следует принципу единственной ответственности - только отображение фильтров

2. УПРАВЛЕНИЕ СОСТОЯНИЕМ:
   - Все состояния фильтров хранятся в родительском компоненте
   - Компонент получает текущие значения и колбэки для их изменения
   - Это обеспечивает централизованное управление состоянием фильтрации

3. ТИПИЗАЦИЯ TypeScript:
   - Интерфейс TaskFilterProps строго определяет все принимаемые пропсы
   - Типы для sortOrder ограничивают возможные значения ("asc", "desc", null)
   - Типы string | null позволяют очищать фильтры

4. ДИНАМИЧЕСКИЕ ДАННЫЕ:
   - Фильтр по авторам динамически генерируется из массива users
   - Использование spread оператора ... для добавления опций к базовому массиву
   - users.map преобразует массив пользователей в массив опций для Select

5. КОМПОЗИЦИЯ UI КОМПОНЕНТОВ:
   - Используются переиспользуемые UI компоненты (Select, Input, Button)
   - Каждый компонент настраивается через пропсы (value, onChange, options и т.д.)
   - Применение CSS классов для кастомизации внешнего вида

6. ПОЛЬЗОВАТЕЛЬСКИЙ ОПЫТ:
   - Кнопка "Сбросить" предоставляет быстрый способ очистки всех фильтров
   - Placeholder тексты помогают пользователю понять назначение каждого фильтра
   - Логичные группировки опций в выпадающих списках

7. СТРУКТУРА ФИЛЬТРОВ:
   - Фильтр по дате (дедлайну) - выбор конкретной даты
   - Фильтр по статусу - выбор из предопределенных статусов задачи
   - Фильтр по автору - выбор из списка пользователей системы
   - Сортировка - упорядочивание задач по дате дедлайна

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
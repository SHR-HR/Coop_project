// Использование SCSS модуля с переменными из файла variables.scss
// Префикс '$' позволяет обращаться к переменным напрямую без указания namespace
@use "../../../styles/abstracts/variables" as *;

// Стили для контейнера списка задач
.list {
  list-style: none; // Убираем стандартные маркеры списка (точки, цифры)
  margin: 0; // Убираем внешние отступы
  padding: 0; // Убираем внутренние отступы

  display: grid; // Используем CSS Grid для расположения карточек задач
  grid-template-columns: repeat(2, 1fr); // Создаем 2 колонки равной ширины (1fr - fractional unit)
  gap: $space-sm; // Расстояние между элементами grid (скорее всего 16px из переменных)

  // Медиа-запрос для мобильных устройств и планшетов
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr; // На маленьких экранах переходим на одну колонку
  }
}

// Стили для сообщения о пустом списке задач
.empty {
  color: $text-color-light; // Цвет текста (светлый из переменных)
  font-size: $font-size-md; // Размер шрифта (средний из переменных)
  padding: $space-md; // Внутренние отступы (скорее всего 24px)
  text-align: center; // Выравнивание текста по центру
  background: $color-grey-1; // Цвет фона (серый из переменных)
  border-radius: $radius-md; // Скругление углов (среднее из переменных)
}


/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ TaskList.tsx:

1. СТРУКТУРА КОМПОНЕНТА:
   - TaskList является компонентом-контейнером для отображения списка задач
   - Компонент принимает пропсы: массив задач и обработчик завершения задачи
   - Использует Redux для получения данных о пользователях

2. REDUX ИНТЕГРАЦИЯ:
   - useSelector hook для доступа к глобальному состоянию Redux
   - selectAllUsers селектор для получения списка всех пользователей
   - Пользователи передаются в дочерние компоненты для отображения информации об авторах/исполнителях

3. УСЛОВНЫЙ РЕНДЕРИНГ:
   - Проверка на пустой массив tasks для отображения сообщения "Задач нет"
   - Это улучшает пользовательский опыт, показывая состояние пустого списка

4. КОМПОЗИЦИЯ КОМПОНЕНТОВ:
   - TaskList рендерит коллекцию компонентов TaskCard
   - Каждая задача передается в TaskCard через spread оператор {...task}
   - Ключевой принцип React - разделение ответственности между компонентами

5. ТИПИЗАЦИЯ TypeScript:
   - Интерфейс TaskListProps строго типизирует входящие пропсы
   - React.FC с дженериком обеспечивает типобезопасность компонента
   - Импорт типа Task гарантирует соответствие структуры данных

6. ОБРАБОТКА СОБЫТИЙ:
   - Функция onCompleteClick передается в каждый TaskCard
   - Это позволяет делегировать обработку завершения задачи родительскому компоненту

ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ TaskList.module.scss:

1. GRID LAYOUT:
   - CSS Grid используется для создания адаптивной сетки карточек
   - repeat(2, 1fr) создает две колонки равной ширины
   - На мобильных устройствах переключается на одну колонку

2. АДАПТИВНОСТЬ:
   - Медиа-запрос @media (max-width: $breakpoint-md) обеспечивает отзывчивый дизайн
   - На устройствах с шириной меньше breakpoint-md отображается одна колонка

3. СТИЛИ ДЛЯ ПУСТОГО СОСТОЯНИЯ:
   - .empty класс стилизует сообщение об отсутствии задач
   - Центрирование текста и фоновый цвет визуально выделяют сообщение
   - Скругленные углы добавляют современный вид

4. ПЕРЕМЕННЫЕ SCSS:
   - Использование переменных обеспечивает согласованность стилей
   - Легкость изменения дизайна через изменение значений переменных

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
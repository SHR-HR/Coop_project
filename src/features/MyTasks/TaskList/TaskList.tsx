// Импорт React и необходимых зависимостей
import React from "react";
// Импорт компонента TaskCard для отображения отдельных задач
import TaskCard from "../TaskCard/TaskCard";
// Импорт модуля стилей из файла TaskList.module.scss
import s from "./TaskList.module.scss";
// Импорт типа Task из общих типов для TypeScript
import type { Task } from "../../../shared/types/types";
// Импорт хука useSelector из React Redux для доступа к состоянию хранилища
import { useSelector } from "react-redux";
// Импорт селектора selectAllUsers для получения списка всех пользователей из слайса
import { selectAllUsers } from "../../../store/slices/usersSlice";

// Определение интерфейса для пропсов компонента TaskList
interface TaskListProps {
  // Массив задач для отображения
  tasks: Task[];
  // Функция-обработчик клика по кнопке завершения задачи
  onCompleteClick: (taskId: number) => void;
}

// Объявление функционального компонента TaskList с использованием React.FC и дженерика для типизации пропсов
const TaskList: React.FC<TaskListProps> = ({ tasks, onCompleteClick }) => {
  // Использование хука useSelector для получения списка всех пользователей из Redux хранилища
  const users = useSelector(selectAllUsers);

  // Условный рендеринг: если массив задач пустой, показываем сообщение
  if (!tasks.length) {
    return <p className={s.empty}>Задач нет</p>;
  }

  // Основной рендер компонента - список задач
  return (
    // Неупорядоченный список с применением стиля list из модуля SCSS
    <ul className={s.list}>
      {/* Маппинг массива tasks для создания элементов списка */}
      {tasks.map((task) => (
        // Рендер компонента TaskCard для каждой задачи
        <TaskCard
          key={task.id} // Уникальный ключ для React (обязательное свойство при маппинге массивов)
          {...task} // Spread оператор для передачи всех свойств задачи как отдельных пропсов
          users={users} // Передача списка пользователей в компонент TaskCard
          onCompleteClick={onCompleteClick} // Передача функции-обработчика клика по завершению задачи
        />
      ))}
    </ul>
  );
};

// Экспорт компонента TaskList по умолчанию для использования в других частях приложения
export default TaskList;





/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:

1. СТРУКТУРА КОМПОНЕНТА:
   - TaskList является компонентом-контейнером для отображения списка задач
   - Компонент принимает пропсы: массив задач и обработчик завершения задачи
   - Использует Redux для получения данных о пользователях

2. REDUX ИНТЕГРАЦИЯ:
   - useSelector hook для доступа к глобальному состоянию Redux
   - selectAllUsers селектор для получения списка всех пользователей
   - Пользователи передаются в дочерние компоненты для отображения информации об авторах/исполнителях

3. УСЛОВНЫЙ РЕНДЕРИНГ:
   - Проверка на пустой массив tasks для отображения сообщения "Задач нет"
   - Это улучшает пользовательский опыт, показывая состояние пустого списка

4. КОМПОЗИЦИЯ КОМПОНЕНТОВ:
   - TaskList рендерит коллекцию компонентов TaskCard
   - Каждая задача передается в TaskCard через spread оператор {...task}
   - Ключевой принцип React - разделение ответственности между компонентами

5. ТИПИЗАЦИЯ TypeScript:
   - Интерфейс TaskListProps строго типизирует входящие пропсы
   - React.FC с дженериком обеспечивает типобезопасность компонента
   - Импорт типа Task гарантирует соответствие структуры данных

6. ОБРАБОТКА СОБЫТИЙ:
   - Функция onCompleteClick передается в каждый TaskCard
   - Это позволяет делегировать обработку завершения задачи родительскому компоненту

7. КЛЮЧЕВЫЕ АСПЕКТЫ:
   - key={task.id} - обязательный атрибут для оптимизации рендеринга списков в React
   - Spread оператор {...task} - удобный способ передачи всех свойств объекта
   - Компонент является чистой функцией (не имеет внутреннего состояния)

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
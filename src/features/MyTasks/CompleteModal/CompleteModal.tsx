// Импорт React и хука useState для управления состоянием компонента
import React, { useState } from "react";
// Импорт компонента Textarea для многострочного ввода текста из shared UI компонентов
import Textarea from "../../../shared/ui/Textarea/Textarea";
// Импорт компонента Button для кнопок из shared UI компонентов
import Button from "../../../shared/ui/Button/Button";
// Импорт модуля стилей из файла CompleteModal.module.scss
import s from "./CompleteModal.module.scss";

// Определение интерфейса для пропсов компонента CompleteModal
interface CompleteModalProps {
  // Флаг, указывающий открыто ли модальное окно
  isOpen: boolean;
  // Текст комментария (результата выполнения задачи)
  comment: string;
  // Функция-обработчик изменения текста комментария
  onCommentChange: (value: string) => void;
  // Функция-обработчик отмены (закрытия модального окна)
  onCancel: () => void;
  // Функция-обработчик подтверждения завершения задачи
  onConfirm: () => void;
  // Флаг, указывающий является ли задача просроченной (необязательный, по умолчанию false)
  isOverdue?: boolean;
  // Дополнительная информация о просрочке (необязательный, по умолчанию пустая строка)
  overdueInfo?: string;
}

// Объявление функционального компонента CompleteModal с использованием React.FC и дженерика для типизации пропсов
const CompleteModal: React.FC<CompleteModalProps> = ({
  // Деструктуризация всех пропсов для удобного использования внутри компонента
  isOpen,
  comment,
  onCommentChange,
  onCancel,
  onConfirm,
  isOverdue = false, // Значение по умолчанию для необязательного пропса
  overdueInfo = "" // Значение по умолчанию для необязательного пропса
}) => {
  // Локальное состояние для хранения текста ошибки валидации
  const [error, setError] = useState("");

  // Условный рендеринг: если модальное окно не открыто, возвращаем null (ничего не рендерим)
  if (!isOpen) return null;

  // Функция-обработчик подтверждения завершения задачи
  const handleConfirm = () => {
    // Проверка валидации: комментарий не должен быть пустым или состоять только из пробелов
    if (!comment.trim()) {
      setError("Комментарий обязателен"); // Устанавливаем текст ошибки
      return; // Прерываем выполнение функции
    }
    setError(""); // Очищаем ошибку если валидация прошла успешно
    onConfirm(); // Вызываем переданную функцию подтверждения
  };

  // Возвращаем JSX разметку модального окна
  return (
    // Оверлей (подложка) модального окна с применением стиля overlay
    <div className={s.overlay}>
      {/* Основное модальное окно с применением стиля modal */}
      <div className={s.modal}>
        {/* Заголовок модального окна */}
        <h3 className={s.title}>Комментарий к задаче</h3>

        {/* Условный рендеринг предупреждения о просрочке задачи */}
        {isOverdue && (
          // Контейнер для предупреждения о просрочке с применением стиля overdueWarning
          <div className={s.overdueWarning}>
            {/* Текст предупреждения с применением стиля warningText */}
            <div className={s.warningText}>
              {/* Заголовок предупреждения с эмодзи и жирным текстом */}
              <strong>⚠️ Задача просрочена</strong>
              {/* Дополнительная информация о просрочке, если она предоставлена */}
              {overdueInfo && <span>{overdueInfo}</span>}
            </div>
          </div>
        )}

        {/* Компонент Textarea для ввода комментария к выполнению задачи */}
        <Textarea
          value={comment} // Текущее значение текстового поля
          // Обработчик изменения текста
          onChange={(e) => {
            onCommentChange(e.target.value); // Передаем новое значение в родительский компонент
            if (error) setError(""); // Очищаем ошибку при начале ввода
          }}
          placeholder="Напишите, как выполнили задачу" // Текст placeholder для пустого поля
          className={s.textarea} // Дополнительный CSS класс для стилизации
        />

        {/* Условный рендеринг сообщения об ошибке */}
        {error && <p className={s.error}>{error}</p>}

        {/* Контейнер для кнопок действий с применением стиля actions */}
        <div className={s.actions}>
          {/* Кнопка отмены с вариантом стиля "secondary" */}
          <Button variant="secondary" onClick={onCancel}>
            Отмена
          </Button>
          {/* Кнопка подтверждения с вариантом стиля "primary" */}
          <Button
            variant="primary"
            onClick={handleConfirm} // Обработчик клика с валидацией
            disabled={!comment.trim()} // Отключаем кнопку если комментарий пустой
          >
            Подтвердить
          </Button>
        </div>
      </div>
    </div>
  );
};

// Экспорт компонента CompleteModal по умолчанию для использования в других частях приложения
export default CompleteModal;



/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:

1. НАЗНАЧЕНИЕ КОМПОНЕНТА:
   - CompleteModal - модальное окно для завершения задачи с комментарием
   - Используется когда пользователь отмечает задачу как выполненную
   - Обеспечивает ввод результата выполнения и валидацию данных

2. УПРАВЛЕНИЕ СОСТОЯНИЕМ:
   - Локальное состояние error для отображения ошибок валидации
   - Основное состояние (comment) управляется родительским компонентом
   - Это следует принципу "поднятия состояния" (lifting state up)

3. ВАЛИДАЦИЯ ДАННЫХ:
   - Обязательный комментарий для завершения задачи
   - Проверка на пустую строку или строку только из пробелов
   - Автоматическое очищение ошибки при начале ввода

4. УСЛОВНЫЙ РЕНДЕРИНГ:
   - Модальное окно рендерится только когда isOpen = true
   - Предупреждение о просрочке показывается только для просроченных задач
   - Сообщение об ошибке показывается только при наличии ошибки

5. ПОЛЬЗОВАТЕЛЬСКИЙ ОПЫТ:
   - Четкие тексты placeholder и заголовки
   - Визуальное предупреждение для просроченных задач
   - Кнопка подтверждения отключается при невалидных данных
   - Возможность отмены действия

6. TypeScript ТИПИЗАЦИЯ:
   - Строгая типизация всех пропсов через интерфейс
   - Необязательные пропсы с значениями по умолчанию
   - Типизация функций-обработчиков

7. ДОСТУПНОСТЬ:
   - Семантическая HTML разметка (h3 для заголовка)
   - Четкие label и placeholder тексты
   - Логичная последовательность элементов

8. БИЗНЕС-ЛОГИКА:
   - Требование комментария обеспечивает учет выполненных работ
   - Предупреждение о просрочке информирует пользователя о статусе задачи
   - Разделение ответственности между отменой и подтверждением

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
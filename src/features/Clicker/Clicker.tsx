// Импорт хуков useDispatch и useSelector из React Redux для работы с состоянием хранилища
import { useDispatch, useSelector } from 'react-redux'
// Импорт действий (action creators) и селектора из слайса testSlice
import {
  increment, // Действие для увеличения счетчика
  decrement, // Действие для уменьшения счетчика 
  resetCounter, // Действие для сброса счетчика в ноль
  selectCounter, // Селектор для получения значения счетчика из хранилища
} from '../../store/slices/testSlice'
// Импорт модуля стилей из файла Clicker.module.scss
import s from './Clicker.module.scss'
// Импорт компонента Button из shared UI компонентов
import Button from '../../shared/ui/Button/Button'

// Объявление функционального компонента Clicker
function Clicker() {
  // Хук useDispatch возвращает функцию dispatch для отправки действий в Redux хранилище
  const dispatch = useDispatch()
  // Хук useSelector используется для получения значения счетчика из Redux хранилища
  // selectCounter - селектор, который извлекает значение counter из состояния
  const counter = useSelector(selectCounter)

  // Функция-обработчик для увеличения счетчика
  const handleIncrement = () => {
    dispatch(increment()) // Отправка действия increment в Redux хранилище
  }

  // Функция-обработчик для уменьшения счетчика
  const handleDecrement = () => {
    dispatch(decrement()) // Отправка действия decrement в Redux хранилище
  }

  // Функция-обработчик для сброса счетчика в ноль
  const handleReset = () => {
    dispatch(resetCounter()) // Отправка действия resetCounter в Redux хранилище
  }

  // Возвращаем JSX разметку компонента Clicker
  return (
    // Основной контейнер с применением стиля wrapper из модуля SCSS
    <div className={s.wrapper}>
      {/* Контейнер кликера с применением стиля clicker */}
      <div className={s.clicker}>
        {/* Заголовок третьего уровня с названием компонента */}
        <h3>Кликер</h3>
        {/* Блок для отображения текущего значения счетчика */}
        <div className={s.counterDisplay}>
          {counter} {/* Отображение значения счетчика из Redux состояния */}
        </div>
        {/* Контейнер для кнопок управления с применением стиля buttons */}
        <div className={s.buttons}>
          {/* Кнопка для уменьшения счетчика с вариантом стиля "danger" (красный) */}
          <Button onClick={handleDecrement} variant="danger">
            - {/* Текст на кнопке - знак минус */}
          </Button>
          {/* Кнопка для сброса счетчика с вариантом стиля "secondary" (вторичный) */}
          <Button onClick={handleReset} variant="secondary">
            Сброс {/* Текст на кнопке на русском языке */}
          </Button>
          {/* Кнопка для увеличения счетчика с вариантом стиля "primary" (основной) */}
          <Button onClick={handleIncrement} variant="primary">
            + {/* Текст на кнопке - знак плюс */}
          </Button>
        </div>
      </div>
    </div>
  )
}

// Экспорт компонента Clicker по умолчанию для использования в других частях приложения
export default Clicker



/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:

1. АРХИТЕКТУРА REDUX:
   - Компонент использует Redux для управления состоянием счетчика
   - Действия (actions) определяют что произошло в приложении
   - Селекторы (selectors) извлекают конкретные данные из состояния хранилища

2. ПРИНЦИПЫ REDUX:
   - Единое хранилище состояния (single source of truth)
   - Состояние доступно только для чтения (read-only)
   - Изменения выполняются через чистые функции (reducers)

3. РОЛЬ КОМПОНЕНТА:
   - Clicker является презентационным компонентом с подключением к Redux
   - Отображает UI и обрабатывает пользовательские действия
   - Делегирует логику состояния Redux хранилищу

4. СТРУКТУРА КОМПОНЕНТА:
   - Заголовок с названием "Кликер"
   - Дисплей для отображения текущего значения счетчика
   - Три кнопки для управления счетчиком: уменьшение, сброс, увеличение

5. ТИПЫ КНОПОК И ИХ НАЗНАЧЕНИЕ:
   - Кнопка "-" (danger) - уменьшение значения, потенциально опасное действие
   - Кнопка "Сброс" (secondary) - нейтральное действие сброса
   - Кнопка "+" (primary) - основное действие увеличения

6. ПОТОК ДАННЫХ:
   - Пользовательское действие → dispatch → Redux хранилище → обновление состояния → перерендер компонента
   - Односторонний поток данных обеспечивает предсказуемость поведения

7. ПРЕИМУЩЕСТВА ИСПОЛЬЗОВАНИЯ REDUX:
   - Централизованное управление состоянием
   - Предсказуемость изменений состояния
   - Возможность отладки с помощью Redux DevTools
   - Легкость тестирования

8. ДОСТУПНОСТЬ И UX:
   - Интуитивно понятный интерфейс с четкими действиями
   - Визуальная обратная связь через изменение значения счетчика
   - Цветовая кодировка кнопок для быстрого понимания их назначения

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
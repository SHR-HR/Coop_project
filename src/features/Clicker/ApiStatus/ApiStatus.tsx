// Импорт хука useEffect из React для выполнения побочных эффектов
import { useEffect } from 'react'
// Импорт хуков useDispatch и useSelector из React Redux для работы с состоянием хранилища
import { useDispatch, useSelector } from 'react-redux';
// Импорт действий и селекторов из слайса testSlice
import {
    checkApiStatus, // Действие для проверки статуса API
    selectApiStatus, // Селектор для получения статуса API из хранилища
    selectTestLoading, // Селектор для получения состояния загрузки
    selectTestError // Селектор для получения ошибки (если есть)
} from '../../../store/slices/testSlice'
// Импорт типа AppDispatch для типизации dispatch функции
import { type AppDispatch } from '../../../store/store';
// Импорт компонента Button из shared UI компонентов
import Button from '../../../shared/ui/Button/Button'

// Объявление функционального компонента ApiStatus
function ApiStatus() {
    // Хук useDispatch с типизацией AppDispatch для отправки действий в Redux хранилище
    const dispatch = useDispatch<AppDispatch>();
    // Хук useSelector для получения текущего статуса API из хранилища
    const apiStatus = useSelector(selectApiStatus)
    // Хук useSelector для получения состояния загрузки из хранилища
    const loading = useSelector(selectTestLoading)
    // Хук useSelector для получения ошибки (если есть) из хранилища
    const error = useSelector(selectTestError)

    // Хук useEffect для выполнения побочных эффектов (проверки API при монтировании компонента)
    useEffect(() => {
        dispatch(checkApiStatus()) // Отправка действия checkApiStatus при монтировании компонента
    }, [dispatch]) // Зависимость - эффект перезапускается только если dispatch изменится

    // Функция-обработчик для ручной проверки статуса API
    const handleCheckApi = () => {
        dispatch(checkApiStatus()) // Отправка действия checkApiStatus при клике на кнопку
    }

    // Возвращаем JSX разметку компонента ApiStatus
    return (
        // Основной контейнер компонента
        <div>
            {/* Заголовок третьего уровня с названием компонента */}
            <h3>Статус API</h3>
            {/* Контейнер для отображения статуса API */}
            <div>
                {/* Условный рендеринг: если идет загрузка, показываем "Проверка..." */}
                {loading ? (
                    <span>Проверка...</span> // Текст отображается во время выполнения запроса к API
                ) : (
                    // Если загрузка завершена, отображаем статус API или сообщение по умолчанию
                    <span>
                        {apiStatus || 'Не проверен'} {/* Отображаем статус API или "Не проверен" если статус отсутствует */}
                    </span>
                )}
                {/* Условный рендеринг: если есть ошибка, показываем ее красным цветом */}
                {error && <p style={{ color: 'red' }}>{error}</p>}
            </div>
            {/* Кнопка для ручной проверки статуса API */}
            <Button onClick={handleCheckApi} disabled={loading}>
                Проверить API {/* Текст на кнопке на русском языке */}
            </Button>
        </div>
    )
}

// Экспорт компонента ApiStatus по умолчанию для использования в других частях приложения
export default ApiStatus


/*
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:

1. НАЗНАЧЕНИЕ КОМПОНЕНТА:
   - ApiStatus компонент отображает статус подключения к backend API
   - Выполняет автоматическую проверку при загрузке компонента
   - Предоставляет возможность ручной проверки статуса

2. REDUX АРХИТЕКТУРА:
   - Использует асинхронные действия (thunks) для проверки API
   - Селекторы для извлечения конкретных данных из состояния
   - Типизированный dispatch для TypeScript безопасности

3. ЖИЗНЕННЫЙ ЦИКЛ КОМПОНЕНТА:
   - При монтировании автоматически запускает проверку API
   - Отображает состояние загрузки во время выполнения запроса
   - Показывает результат или ошибку после завершения запроса

4. УПРАВЛЕНИЕ СОСТОЯНИЕМ:
   - loading: индикатор выполнения асинхронного запроса
   - apiStatus: текстовое описание статуса API
   - error: сообщение об ошибке если запрос не удался

5. ПОЛЬЗОВАТЕЛЬСКИЙ ИНТЕРФЕЙС:
   - Четкая визуальная иерархия: заголовок → статус → кнопка
   - Интерактивная кнопка с состоянием disabled во время загрузки
   - Визуальная обратная связь через сообщения и цвета

6. ОБРАБОТКА ОШИБОК:
   - Отображение ошибок красным цветом для привлечения внимания
   - Сообщение "Не проверен" для начального состояния
   - Кнопка позволяет повторить запрос при возникновении ошибки

7. TypeScript ТИПИЗАЦИЯ:
   - Явное указание типа AppDispatch для dispatch функции
   - Строгая типизация обеспечивает безопасность при работе с Redux
   - Автодополнение и проверка типов во время разработки

8. ДОСТУПНОСТЬ И UX:
   - Кнопка отключается во время загрузки предотвращая дублирующие запросы
   - Четкие текстовые сообщения информируют пользователя о состоянии
   - Простой и понятный интерфейс без лишних элементов

9. ПРАКТИЧЕСКОЕ ПРИМЕНЕНИЕ:
   - Полезен для диагностики проблем с подключением к backend
   - Помогает пользователям понять состояние системы
   - Может быть расширен для отображения дополнительной информации о API

Комментарии сохранены на русском языке в соответствии с требованиями,
без изменения логики и структуры исходного кода.
*/
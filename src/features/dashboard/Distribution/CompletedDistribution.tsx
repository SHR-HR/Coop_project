// Импорт файла стилей для компонента CompletedDistribution
import s from "./CompletedDistribution.module.scss";
// Импорт хука useMemo из React для мемоизации значений
import { useMemo } from "react";
// Импорт хука useSelector из React Redux для доступа к состоянию хранилища
import { useSelector } from "react-redux";
// Импорт селектора для получения отсортированных данных
import { makeSelectSorted } from "../../../store/selectors/statisticsSelectors";
// Импорт типа RootState для типизации состояния хранилища
import type { RootState } from "../../../store/store";

/**
 * Компонент гистограммы: локальная сортировка по completedDesc и первые 12 элементов
 * Отображает распределение выполненных задач среди пользователей
 */
export default function CompletedDistribution() {
    // Мемоизация селектора для предотвращения пересоздания при каждом рендере
    const selectSorted = useMemo(() => makeSelectSorted(), []);

    // Получение отсортированных данных из хранилища Redux
    // Сортировка по убыванию количества выполненных задач
    const sorted = useSelector((s: RootState) => selectSorted(s, "", "completedDesc"));

    // Если нет данных, возвращаем null (компонент не отображается)
    if (sorted.length === 0) return null;

    // Выбор первых 12 элементов из отсортированного массива
    const top = sorted.slice(0, 12);
    // Нахождение максимального количества выполненных задач среди выбранных элементов
    // Если все значения 0, используем 1 для избежания деления на ноль
    const max = Math.max(...top.map((u) => u.completedTasks), 1);

    // Возвращаем JSX разметку компонента
    return (
        // Секция-обертка с ARIA-атрибутом для доступности
        <section className={s.wrap} aria-label="Распределение выполненных">
            {/* Заголовок компонента */}
            <h3 className={s.title}>Распределение «Выполнено» (Top)</h3>
            {/* Список для отображения гистограммы */}
            <ul className={s.list}>
                {/* Маппинг каждого пользователя в элемент списка */}
                {top.map((u) => {
                    // Расчет ширины заполнения в процентах относительно максимального значения
                    const w = Math.round((u.completedTasks / max) * 100);
                    return (
                        // Элемент списка с уникальным ключом и всплывающей подсказкой
                        <li key={u.id} className={s.item} title={`${u.name}: ${u.completedTasks}`}>
                            {/* Отображение имени пользователя */}
                            <span className={s.name}>{u.name}</span>
                            {/* Контейнер для полосы гистограммы */}
                            <div className={s.bar}>
                                {/* Заполненная часть полосы с динамической шириной */}
                                <span className={s.fill} style={{ width: `${w}%` }} />
                            </div>
                            {/* Числовое значение выполненных задач */}
                            <b className={s.val}>{u.completedTasks}</b>
                        </li>
                    );
                })}
            </ul>
        </section>
    );
}

/*

// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

1. Импорт стилей:
   - Файл CompletedDistribution.module.scss содержит CSS-стили, специфичные для этого компонента
   - Префикс 's.' указывает на использование CSS Modules для изоляции стилей

2. Хук useMemo:
   - Используется для мемоизации функции селектора
   - Пустой массив зависимостей [] означает, что селектор создается только один раз
   - Это оптимизация производительности

3. Хук useSelector:
   - Позволяет компоненту получать данные из хранилища Redux
   - В данном случае получает отсортированный список пользователей
   - Параметр "completedDesc" указывает на сортировку по убыванию выполненных задач

4. Условный рендеринг:
   - Если sorted.length === 0, компонент возвращает null и не отображается
   - Это защита от рендеринга при отсутствии данных

5. Метод slice(0, 12):
   - Берет первые 12 элементов из отсортированного массива
   - Ограничивает количество отображаемых пользователей

6. Math.max(...top.map(...), 1):
   - Находит максимальное значение выполненных задач среди выбранных пользователей
   - Значение 1 используется как fallback для избежания деления на ноль

7. ARIA-атрибут aria-label:
   - Улучшает доступность для пользователей с ограниченными возможностями
   - Описывает назначение секции для скринридеров

8. Динамическое вычисление ширины (width: `${w}%`):
   - Ширина заполнения полосы вычисляется пропорционально максимальному значению
   - Позволяет визуально сравнивать показатели разных пользователей

9. Атрибут title в элементе li:
   - Создает всплывающую подсказку при наведении курсора
   - Показывает имя пользователя и количество выполненных задач

10. Структура компонента:
    - section → h3 → ul → li → [span, div, b]
    - Семантически правильная HTML-разметка для гистограммы

*/
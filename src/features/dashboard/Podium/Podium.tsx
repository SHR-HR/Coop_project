// Импорт файла стилей для компонента Podium из SCSS модуля
// Импорт позволяет использовать CSS-классы как объект 's' для стилизации компонента
import s from "./Podium.module.scss";
// Импорт хука useSelector из React Redux для доступа к состоянию хранилища
import { useSelector } from "react-redux";
// Импорт селектора для получения глобальных KPI (ключевых показателей эффективности)
import { selectGlobalKpis } from "../../../store/selectors/statisticsSelectors";

/**
 * Компонент Podium - отображает подиум Top-3 пользователей по количеству выполненных задач
 * Подиум Top-3 по "Выполнено".
 * Если меньше 3 — показываем сколько есть.
 */
// Экспорт компонента Podium по умолчанию
// Функциональный React компонент, отображающий рейтинг лидеров
export default function Podium() {
    // Получаем данные лидерборда из хранилища с помощью селектора selectGlobalKpis
    // Деструктуризация объекта для получения свойства leaderboard
    const { leaderboard } = useSelector(selectGlobalKpis);

    // Получаем первые 3 элемента из лидерборда (топ-3 пользователей)
    // Метод slice(0, 3) возвращает новый массив с элементами от индекса 0 до 2 (включительно)
    const top3 = leaderboard.slice(0, 3);

    // Если в топ-3 нет элементов (массив пустой), возвращаем null и не отображаем компонент
    if (top3.length === 0) return null;

    // Переупорядочиваем элементы для визуального отображения на подиуме
    // Порядок отображения: 2-е место, 1-е место, 3-е место (для лучшего визуального восприятия)
    // Фильтр Boolean удаляет возможные undefined/null значения из массива
    const order = [top3[1], top3[0], top3[2]].filter(Boolean);

    // Возвращение JSX разметки компонента подиума
    return (
        // Семантический HTML тег section для группировки связанного контента
        // aria-label обеспечивает доступность для скринридеров
        <section className={s.wrap} aria-label="Лидерборд Top-3">
            {/* Заголовок третьего уровня для секции лидерборда */}
            <h3 className={s.title}>Лидерборд</h3>
            {/* Основной контейнер подиума с местами */}
            <div className={s.podium}>
                {/* Маппинг массива order для отображения каждого участника топ-3 */}
                {order.map((p, idx) => (
                    // Контейнер для каждого места на подиуме
                    // key - уникальный идентификатор для React (используется id пользователя)
                    // className формируется динамически на основе позиции:
                    //   ${s.place} - базовый класс для места
                    //   ${idx === 1 ? s.first : idx === 0 ? s.second : s.third} - условные классы для 1, 2, 3 мест
                    // title - всплывающая подсказка с именем и количеством выполненных задач
                    <div
                        key={p!.id}
                        className={`${s.place} ${idx === 1 ? s.first : idx === 0 ? s.second : s.third}`}
                        title={`${p!.name} — ${p!.completed} задач`}
                    >
                        {/* Количество выполненных задач с жирным начертанием */}
                        <b className={s.score}>{p!.completed}</b>
                        {/* Имя пользователя */}
                        <span className={s.name}>{p!.name}</span>
                        {/* Бейдж с номером места на подиуме (курсивный стиль) */}
                        <i className={s.badge}>#{p!.place}</i>
                    </div>
                ))}
            </div>
        </section>
    );
}




// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

// 1. СТРУКТУРА КОМПОНЕНТА:
//    - Функциональный React компонент без пропсов
//    - Получает данные исключительно из Redux хранилища через useSelector
//    - Использует TypeScript (но без явной типизации в этом файле)

// 2. РАБОТА С ДАННЫМИ:
//    - selectGlobalKpis - селектор для получения глобальной статистики
//    - leaderboard - массив пользователей отсортированный по выполненным задачам
//    - top3 - первые три элемента из leaderboard
//    - order - переупорядоченный массив для визуального отображения

// 3. ЛОГИКА ОТОБРАЖЕНИЯ:
//    - Если нет данных (top3.length === 0) - компонент не отображается
//    - Порядок [top3[1], top3[0], top3[2]] создает визуальный подиум:
//        * Индекс 1 (второй элемент) становится первым в отображении (2-е место слева)
//        * Индекс 0 (первый элемент) становится вторым в отображении (1-е место по центру)
//        * Индекс 2 (третий элемент) становится третьим в отображении (3-е место справа)
//    - filter(Boolean) обеспечивает отсеивание undefined значений

// 4. ВИЗУАЛЬНАЯ СТРУКТУРА:
//    - section - семантический контейнер для группы связанного контента
//    - h3 - заголовок секции "Лидерборд"
//    - div.podium - контейнер для трех мест подиума
//    - Каждое место содержит: счетчик задач, имя пользователя, бейдж места

// 5. ДОСТУПНОСТЬ:
//    - aria-label="Лидерборд Top-3" - помогает скринридерам понять назначение секции
//    - title атрибут - предоставляет дополнительную информацию при наведении
//    - Семантическая разметка улучшает SEO и доступность

// 6. ОБРАБОТКА ОШИБОК:
//    - Проверка top3.length === 0 - обработка случая когда нет данных
//    - filter(Boolean) - защита от null/undefined в массиве
//    - Оператор ! (non-null assertion) - утверждение что p не null/undefined

// 7. КЛЮЧЕВЫЕ ЭЛЕМЕНТЫ ИНТЕРФЕЙСА:
//    - s.score - выделяет количество выполненных задач (самая важная цифра)
//    - s.name - отображает имя пользователя
//    - s.badge - показывает позицию в рейтинге с символом #
//    - Условные классы s.first, s.second, s.third - стилизуют места соответственно

// 8. ПОЛЬЗОВАТЕЛЬСКИЙ ОПЫТ:
//    - Визуальное расположение 2-1-3 имитирует реальный подиум
//    - Центральное положение первого места привлекает основное внимание
//    - Подсказки при наведении дают дополнительную информацию
//    - Четкая иерархия информации помогает быстро понять рейтинг
// Импорт файла стилей для компонента MyRankBadge
import s from "./MyRankBadge.module.scss";
// Импорт хука useMemo из React для мемоизации значений
import { useMemo } from "react";
// Импорт хука useSelector из React Redux для доступа к состоянию хранилища
import { useSelector } from "react-redux";
// Импорт селектора для получения отсортированного списка пользователей
import { makeSelectSorted } from "../../../store/selectors/statisticsSelectors";
// Импорт селектора для получения данных профиля текущего пользователя
import { selectProfile } from "../../../store/slices/profileSlice";
// Импорт типа RootState для типизации состояния хранилища
import type { RootState } from "../../../store/store";

/**
 * Компонент MyRankBadge - отображает бейдж с текущей позицией пользователя в рейтинге
 * Показываем бейдж "Моя позиция" в текущей сортировке.
 * Если пользователь не авторизован — ничего не рендерим.
 */
export default function MyRankBadge() {
    // Получаем данные текущего пользователя из хранилища с помощью селектора selectProfile
    const me = useSelector(selectProfile);

    // Мемоизируем селектор для отсортированного списка, чтобы избежать пересоздания при каждом рендере
    const selectSorted = useMemo(() => makeSelectSorted(), []);

    // Получаем отсортированный список пользователей из хранилища
    // Используем текущий режим сортировки из состояния statistics
    const sorted = useSelector((s: RootState) => selectSorted(s, "", s.statistics.sortMode));

    // Если пользователь не авторизован (me = null), не отображаем компонент
    if (!me) return null;

    // Находим индекс текущего пользователя в отсортированном списке
    // Сравниваем по имени пользователя
    const idx = sorted.findIndex((u) => u.name === me.name);

    // Если пользователь не найден в списке (индекс = -1), не отображаем компонент
    if (idx === -1) return null;

    // Вычисляем позицию в рейтинге (индекс + 1, так как индексация начинается с 0)
    const rank = idx + 1;

    // Рендерим компонент бейджа с позицией пользователя
    return (
        // Основной контейнер бейджа с CSS классами из модуля стилей
        <div className={s.badge} title="Место в текущей сортировке">
            {/* Текстовая метка "Моя позиция" */}
            <span className={s.k}>Моя позиция</span>
            {/* Значение позиции с жирным начертанием */}
            <b className={s.v}>#{rank}</b>
        </div>
    );
}



// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

// 1. ИМПОРТЫ:
//    - Импорт стилей из SCSS модуля позволяет использовать CSS-классы как объект 's'
//    - Хук useMemo оптимизирует производительность, мемоизируя селектор
//    - useSelector предоставляет доступ к состоянию Redux хранилища
//    - makeSelectSorted - фабрика селекторов для получения отсортированных данных
//    - selectProfile - селектор для получения данных профиля пользователя
//    - RootState - тип TypeScript для состояния всего Redux хранилища

// 2. КОМПОНЕНТ MyRankBadge:
//    - Функциональный React компонент, отображающий позицию пользователя в рейтинге
//    - Компонент не принимает пропсы, все данные получает из Redux хранилища

// 3. РАБОТА С REDUX:
//    - useSelector используется для подписки на части состояния хранилища
//    - selectProfile получает данные текущего пользователя
//    - makeSelectSorted создает селектор для отсортированного списка пользователей

// 4. ЛОГИКА ОТОБРАЖЕНИЯ:
//    - Компонент проверяет авторизацию пользователя (if (!me) return null)
//    - Ищет позицию пользователя в отсортированном списке
//    - Если пользователь не найден, компонент не отображается
//    - Позиция вычисляется как индекс + 1 для человеко-читаемого формата

// 5. ВИЗУАЛЬНАЯ ЧАСТЬ:
//    - Используются CSS-классы из модуля: s.badge, s.k, s.v
//    - Атрибут title показывает всплывающую подсказку при наведении
//    - Текст "Моя позиция" отображает назначение бейджа
//    - Значение позиции форматируется как "#номер" с жирным начертанием

// 6. ОПТИМИЗАЦИЯ:
//    - useMemo предотвращает пересоздание селектора при каждом рендере
//    - Ранний возврат null избегает лишних вычислений для неавторизованных пользователей

// 7. ТИПИЗАЦИЯ:
//    - TypeScript обеспечивает типобезопасность при работе с Redux состоянием
//    - RootState предоставляет полную информацию о структуре хранилища

// 8. ДОСТУПНОСТЬ:
//    - Атрибут title улучшает доступность, поясняя назначение элемента
//    - Семантическая разметка помогает скринридерам понять структуру компонента
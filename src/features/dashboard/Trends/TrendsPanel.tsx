// Импорт файла стилей для компонента TrendsPanel из SCSS модуля
// Импорт позволяет использовать CSS-классы как объект 's' для стилизации компонента
import s from "./TrendsPanel.module.scss";
// Импорт компонента Sparkline для отображения мини-графиков трендов
// Sparkline - это компонент для визуализации данных в виде компактных графиков
import Sparkline from "../../../shared/ui/Sparkline/Sparkline";
// Импорт пользовательского хука useDashboardHistory для получения исторических данных
// Хук предоставляет доступ к истории изменений показателей дашборда
import { useDashboardHistory } from "./useDashboardHistory";

// Экспорт компонента TrendsPanel по умолчанию
// Функциональный React компонент, отображающий панель трендов с мини-графиками
export default function TrendsPanel() {
    // Использование кастомного хука для получения массива исторических данных
    // history содержит последовательность состояний дашборда за разные периоды времени
    const history = useDashboardHistory();

    // Проверка наличия достаточного количества данных для отображения трендов
    // Если в истории меньше 2 точек данных, скрываем компонент (тренды не видны)
    if (history.length < 2) return null;

    // Создание массива данных по выполненным задачам из истории
    // map преобразует массив history в массив чисел (количество выполненных задач в каждый период)
    const comp = history.map((p) => p.completed);

    // Создание массива данных по задачам в работе из истории
    // map преобразует массив history в массив чисел (количество задач в работе в каждый период)
    const inw = history.map((p) => p.inWork);

    // Создание массива данных по просроченным задачам из истории
    // map преобразует массив history в массив чисел (количество просроченных задач в каждый период)
    const fail = history.map((p) => p.failed);

    // Вспомогательная функция для получения последнего элемента массива
    // Принимает массив чисел, возвращает последний элемент или 0 если массив пустой
    // a[a.length - 1] - доступ к последнему элементу массива
    // ?? 0 - оператор нулевого слияния, возвращает 0 если элемент undefined или null
    const last = (a: number[]) => a[a.length - 1] ?? 0;

    // Создание массива карточек для отображения трендов
    // Каждая карточка содержит название, текущее значение, данные для графика и подсказку
    const cards = [
        {
            k: "Выполнено",           // Название метрики - Выполнено
            v: last(comp),            // Текущее значение - последний элемент массива comp
            data: comp,               // Массив данных для построения графика выполненных задач
            hint: "Динамика выполненных по визитам"  // Подсказка при наведении
        },
        {
            k: "В работе",            // Название метрики - В работе
            v: last(inw),             // Текущее значение - последний элемент массива inw
            data: inw,                // Массив данных для построения графика задач в работе
            hint: "Динамика задач в работе по визитам"  // Подсказка при наведении
        },
        {
            k: "Просрочено",          // Название метрики - Просрочено
            v: last(fail),            // Текущее значение - последний элемент массива fail
            data: fail,               // Массив данных для построения графика просроченных задач
            hint: "Динамика просрочек по визитам"  // Подсказка при наведении
        },
    ];

    // Возвращение JSX разметки компонента панели трендов
    return (
        // Семантический HTML тег section для группировки связанного контента трендов
        // aria-label обеспечивает доступность для скринридеров, описывая назначение секции
        <section className={s.wrap} aria-label="Тренды">
            {/* Маппинг массива cards для отображения каждой карточки тренда */}
            {cards.map((c, i) => (
                // Контейнер для отдельной карточки тренда
                // key - уникальный идентификатор для React (используется индекс массива)
                // className - применение стилей карточки из SCSS модуля
                // title - всплывающая подсказка с описанием графика при наведении курсора
                <div key={i} className={s.card} title={c.hint}>
                    {/* Верхняя строка карточки с названием и текущим значением */}
                    <div className={s.row}>
                        {/* Название метрики (Выполнено/В работе/Просрочено) */}
                        <span className={s.k}>{c.k}</span>
                        {/* Текущее значение метрики с жирным начертанием */}
                        <b className={s.v}>{c.v}</b>
                    </div>
                    {/* Компонент Sparkline для отображения мини-графика тренда */}
                    {/* data - передача массива чисел для построения графика */}
                    <Sparkline data={c.data} />
                </div>
            ))}
        </section>
    );
}

// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

// 1. СТРУКТУРА КОМПОНЕНТА:
//    - Функциональный React компонент без пропсов
//    - Использует кастомный хук для получения данных
//    - Отображает 3 карточки с трендами: выполненные, в работе, просроченные

// 2. РАБОТА С ДАННЫМИ:
//    - useDashboardHistory() - хук возвращает массив исторических данных
//    - history содержит объекты с полями completed, inWork, failed за разные периоды
//    - Проверка history.length < 2 - тренды требуют минимум 2 точки данных

// 3. ПРЕОБРАЗОВАНИЕ ДАННЫХ:
//    - comp, inw, fail - массивы чисел, извлеченные из истории
//    - Функция last() - утилита для получения последнего значения массива
//    - cards - массив конфигураций для отображения карточек

// 4. ВИЗУАЛИЗАЦИЯ ТРЕНДОВ:
//    - Каждая карточка содержит название, текущее значение и график Sparkline
//    - Sparkline компонент отображает компактный линейный график
//    - Подсказки (hint) объясняют что показывает график

// 5. ДОСТУПНОСТЬ:
//    - aria-label="Тренды" - помогает скринридерам понять назначение секции
//    - title атрибуты предоставляют дополнительную информацию при наведении
//    - Семантический тег section улучшает структуру документа

// 6. КЛЮЧЕВЫЕ ЭЛЕМЕНТЫ ИНТЕРФЕЙСА:
//    - s.row - контейнер для названия и значения в одной строке
//    - s.k - стиль для названия метрики
//    - s.v - стиль для текущего значения (жирный шрифт)
//    - Sparkline - визуализация исторической динамики

// 7. ОБРАБОТКА ГРАНИЧНЫХ СЛУЧАЕВ:
//    - Возврат null при недостаточном количестве данных
//    - Функция last() с оператором ?? 0 обрабатывает пустые массивы
//    - Использование индекса в key для статического массива допустимо

// 8. ПОЛЬЗОВАТЕЛЬСКИЙ ОПЫТ:
//    - Компактное отображение трендов в виде мини-графиков
//    - Текущее значение выделено жирным шрифтом
//    - Подсказки помогают понять что именно показывает график
//    - Визуальная идентификация роста/падения показателей
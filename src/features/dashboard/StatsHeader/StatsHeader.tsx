// Импорт файла стилей для компонента StatsHeader из SCSS модуля
// Импорт позволяет использовать CSS-классы как объект 's' для стилизации компонента
import s from "./StatsHeader.module.scss";

// Определение типа Props для пропсов компонента StatsHeader
// TypeScript интерфейс описывает структуру принимаемых параметров
// Все поля содержат числовые значения, кроме topName который может быть строкой или null
type Props = {
    total: number;                    // Общее количество задач
    completed: number;                // Количество выполненных задач
    inWork: number;                   // Количество задач в работе
    failed: number;                   // Количество просроченных задач
    doneRate: number;                 // Процент выполненных задач (уже в диапазоне 0..100)
    avgCompletedPerUser: number;      // Среднее количество выполненных задач на одного пользователя
    topName: string | null;           // Имя топ-исполнителя (может быть null если нет данных)
};

// Экспорт компонента StatsHeader по умолчанию
// Функциональный React компонент, отображающий заголовок со статистикой KPI
// Принимает объект пропсов с деструктуризацией всех свойств
export default function StatsHeader({
    total,                    // Деструктуризация пропса total - общее количество задач
    completed,                // Деструктуризация пропса completed - выполненные задачи
    inWork,                   // Деструктуризация пропса inWork - задачи в работе
    failed,                   // Деструктуризация пропса failed - просроченные задачи
    doneRate,                 // Деструктуризация пропса doneRate - процент выполненных задач
    avgCompletedPerUser,      // Деструктуризация пропса avgCompletedPerUser - среднее на пользователя
    topName                   // Деструктуризация пропса topName - имя топ-исполнителя
}: Props) {
    // Вычисление процентного значения с ограничением в диапазоне от 0 до 100
    // Math.round(doneRate || 0) - округление значения или 0 если doneRate ложное
    // Math.max(0, ...) - гарантирует что значение не меньше 0
    // Math.min(100, ...) - гарантирует что значение не больше 100
    const pct = Math.max(0, Math.min(100, Math.round(doneRate || 0)));

    // Возвращение JSX разметки компонента заголовка статистики
    return (
        // Семантический HTML тег section для группировки связанного контента KPI
        // aria-label обеспечивает доступность для скринридеров, описывая назначение секции
        <section className={s.wrap} aria-label="KPI">
            {/* Компонент K для отображения метрики "Всего задач" с значением total */}
            <K k="Всего задач" v={total} />
            {/* Компонент K для отображения метрики "Выполнено" с значением completed */}
            <K k="Выполнено" v={completed} />
            {/* Компонент K для отображения метрики "В работе" с значением inWork */}
            <K k="В работе" v={inWork} />
            {/* Компонент K для отображения метрики "Просрочено" с значением failed */}
            <K k="Просрочено" v={failed} />
            {/* Компонент K для отображения метрики "Доля выполненных" с процентным значением */}
            {/* Значение форматируется как строка с символом процента: `${pct}%` */}
            <K k="Доля выполненных" v={`${pct}%`} />
            {/* Компонент K для отображения метрики "Выполнено / чел" со средним значением на пользователя */}
            <K k="Выполнено / чел" v={avgCompletedPerUser} />
            {/* Компонент K для отображения метрики "Топ исполнитель" с именем или прочерком */}
            {/* Оператор ?? (nullish coalescing) возвращает "—" если topName равен null или undefined */}
            <K k="Топ исполнитель" v={topName ?? "—"} />
        </section>
    );
}

// Вспомогательный компонент K для отображения отдельной карточки метрики
// Принимает два пропса: k (ключ-название) и v (значение)
// Внутренний компонент без экспорта, используется только внутри StatsHeader
function K({ k, v }: { k: string; v: number | string }) {
    // Возвращение JSX разметки для одной карточки KPI
    return (
        // Контейнер карточки с CSS классом из модуля стилей
        <div className={s.card}>
            {/* Контейнер для названия метрики (ключа) */}
            {/* title атрибут показывает полное название при наведении (дублирует содержимое) */}
            <div className={s.k} title={String(k)}>
                {/* Отображение названия метрики */}
                {k}
            </div>
            {/* Контейнер для значения метрики */}
            {/* title атрибут показывает полное значение при наведении (дублирует содержимое) */}
            <div className={s.v} title={String(v)}>
                {/* Отображение значения метрики, преобразованного в строку */}
                {v}
            </div>
        </div>
    );
}





// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

// 1. СТРУКТУРА КОМПОНЕНТА:
//    - StatsHeader - основной компонент, принимающий 7 пропсов со статистикой
//    - K - внутренний вспомогательный компонент для отображения отдельных метрик
//    - Компонент не имеет состояния, является чисто презентационным

// 2. TypeScript ТИПИЗАЦИЯ:
//    - Props тип строго определяет структуру входящих данных
//    - doneRate уже ожидается в процентах (0..100)
//    - topName может быть string | null для обработки отсутствия данных
//    - Компонент K имеет inline-типизацию для пропсов

// 3. ЛОГИКА ОБРАБОТКИ ДАННЫХ:
//    - pct вычисляется с защитой от некорректных значений
//    - Math.round(doneRate || 0) - округление и обработка ложных значений
//    - Math.max(0, ...) и Math.min(100, ...) ограничивают диапазон
//    - topName ?? "—" отображает прочерк при отсутствии топ-исполнителя

// 4. АРХИТЕКТУРА КОМПОНЕНТОВ:
//    - Разделение на основной и вспомогательный компонент следует принципу DRY
//    - Компонент K переиспользуется 7 раз с разными данными
//    - Внутренний компонент не экспортируется, используется только локально

// 5. ДОСТУПНОСТЬ И UX:
//    - aria-label="KPI" помогает скринридерам понять назначение секции
//    - title атрибуты в компоненте K обеспечивают подсказки при наведении
//    - Семантический тег section улучшает структуру документа
//    - Прочерк "—" ясно показывает отсутствие данных

// 6. ОБРАБОТКА ГРАНИЧНЫХ СЛУЧАЕВ:
//    - Защита от некорректных процентных значений (вне диапазона 0-100)
//    - Обработка null в topName с помощью оператора ??
//    - Преобразование всех значений в строки для title атрибутов

// 7. ПРОИЗВОДИТЕЛЬНОСТЬ:
//    - Компоненты чистые (не имеют состояния и побочных эффектов)
//    - Вычисления легковесные и происходят только при рендере
//    - Нет ненужных перерисовок или сложных операций

// 8. ВИЗУАЛЬНАЯ СТРУКТУРА:
//    - 7 карточек KPI отображают ключевые метрики производительности
//    - Логическая группировка: общие цифры → проценты → средние → топ
//    - Четкие и понятные названия метрик на русском языке
//    - Значения отображаются в соответствующем формате (числа, проценты, имена)
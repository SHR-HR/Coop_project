// Импорт файла стилей для компонента OverdueBadge из SCSS модуля
// Импорт позволяет использовать CSS-классы как объект 's' для стилизации компонента
import s from "./OverdueBadge.module.scss";

// Определение типа Props для пропсов компонента
// TypeScript интерфейс описывает структуру принимаемых параметров
// failed - число просроченных задач, total - общее количество задач
type Props = { failed: number; total: number };

// Экспорт компонента OverdueBadge по умолчанию
// Функциональный React компонент, отображающий бейдж с информацией о просроченных задачах
// Принимает объект пропсов с деструктуризацией на failed и total
export default function OverdueBadge({ failed, total }: Props) {
    // Вычисление процентного соотношения просроченных задач к общему количеству
    // Если total = 0, то rate = 0 (избегаем деления на ноль)
    // Math.round округляет результат до целого числа
    // (failed / total) * 100 - вычисление процента просроченных задач
    const rate = total ? Math.round((failed / total) * 100) : 0;

    // Определение флага опасности (danger) - true если есть просроченные задачи
    // Используется для применения стилей в зависимости от наличия просроченных задач
    const danger = failed > 0;

    // Возвращение JSX разметки компонента
    return (
        // Элемент span - строчный контейнер для бейджа
        // className динамически формируется на основе условий:
        // ${s.badge} - базовый класс стилей бейджа
        // ${danger ? s.danger : s.ok} - условный класс: danger если есть просрочки, иначе ok
        // title - всплывающая подсказка при наведении курсора
        <span
            className={`${s.badge} ${danger ? s.danger : s.ok}`}
            title={`Просрочено: ${failed} (${rate}%)`}
        >
            {/* Статический текст "Просрочено:" */}
            Просрочено:
            {/* Жирное начертание для числа просроченных задач */}
            <b>{failed}</b>
            {/* Условное отображение процентного соотношения в скобках */}
            {/* Если total > 0, показываем проценты, иначе пустую строку */}
            {total ? ` (${rate}%)` : ""}
        </span>
    );
}





// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

// 1. СТРУКТУРА КОМПОНЕНТА:
//    - Функциональный React компонент с TypeScript типизацией
//    - Принимает два обязательных пропса: failed (число) и total (число)
//    - Возвращает JSX элемент span с информацией о просроченных задачах

// 2. ЛОГИКА ВЫЧИСЛЕНИЙ:
//    - rate - вычисляет процент просроченных задач от общего количества
//    - Проверка total ? ... : 0 - защита от деления на ноль
//    - Math.round() - округление до целого числа для лучшей читаемости
//    - danger - булево значение, определяющее наличие просроченных задач

// 3. ДИНАМИЧЕСКИЕ СТИЛИ:
//    - className формируется шаблонной строкой с условным оператором
//    - Всегда применяется базовый класс s.badge
//    - Дополнительный класс s.danger или s.ok применяется условно
//    - Это позволяет менять цвет бейджа в зависимости от наличия проблем

// 4. ДОСТУПНОСТЬ И UX:
//    - Атрибут title предоставляет дополнительную информацию при наведении
//    - Жирное начертание <b> акцентирует внимание на количестве просроченных задач
//    - Процентное соотношение помогает оценить масштаб проблемы

// 5. ОБРАБОТКА ГРАНИЧНЫХ СЛУЧАЕВ:
//    - Обработка случая когда total = 0 (избегание деления на ноль)
//    - Условный рендеринг процентного значения только когда есть общие задачи
//    - Корректное отображение даже при отсутствии задач

// 6. TypeScript ПРЕИМУЩЕСТВА:
//    - Типизация Props обеспечивает контроль за передаваемыми данными
//    - Компилятор проверяет корректность использования компонента
//    - Автодополнение в IDE для пропсов failed и total

// 7. ПРОИЗВОДИТЕЛЬНОСТЬ:
//    - Вычисления происходят при каждом рендере, но они легковесные
//    - Нет тяжелых операций или сторонних зависимостей
//    - Компонент простой и эффективный

// 8. ВИЗУАЛЬНАЯ ИЕРАРХИЯ:
//    - Текст "Просрочено:" - описательная часть
//    - Число failed - ключевая информация (выделена жирным)
//    - Процент rate - дополнительная аналитическая информация
//    - Такая структура помогает быстро понять ситуацию с задачами
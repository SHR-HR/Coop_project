// Импорт файла стилей для компонента DoneRateBadge из того же каталога
// Префикс 's' используется для обращения к классам CSS Modules
import s from "./DoneRateBadge.module.scss";

// Объявление типа Props для типизации входных параметров компонента
// Определяет структуру объекта props, который принимает компонент
// doneRate - число, представляющее процент выполненных задач
type Props = { doneRate: number };

// Экспорт компонента DoneRateBadge по умолчанию
// Functional Component (функциональный компонент) React
// Принимает деструктуризированный параметр doneRate из объекта props
// Параметр типизирован с помощью типа Props
export default function DoneRateBadge({ doneRate }: Props) {
    // Объявление переменной cls для хранения имени CSS класса
    // Выбор класса происходит на основе значения doneRate с помощью тернарных операторов
    const cls =
        // Если doneRate больше или равен 80, выбираем класс s.good (хороший показатель)
        doneRate >= 80 ? s.good :
            // Иначе если doneRate больше или равен 50, выбираем класс s.mid (средний показатель)
            doneRate >= 50 ? s.mid :
                // Во всех остальных случаях выбираем класс s.bad (плохой показатель)
                s.bad;

    // Возвращаем JSX разметку компонента
    return (
        // Создание span элемента с комбинированными классами стилей
        // ${s.badge} - базовый класс бейджа из CSS Modules
        // ${cls} - динамический класс, определенный выше на основе значения doneRate
        // Атрибут title показывает всплывающую подсказку при наведении курсора
        // Подсказка содержит подробную информацию: "Доля выполненных: X%"
        <span className={`${s.badge} ${cls}`} title={`Доля выполненных: ${doneRate}%`}>
            {/* Текстовое содержимое бейджа */}
            {/* "Готово: " - статический текст метки */}
            Готово:
            {/* Элемент <b> для жирного начертания числового значения процента */}
            <b>{doneRate}%</b>
        </span>
    );
}




/*
// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

Импорт стилей через CSS Modules:
import s from "./DoneRateBadge.module.scss" импортирует SCSS файл как модуль
Префикс s предоставляет доступ к классам как свойствам объекта
Это обеспечивает изоляцию стилей и предотвращает конфликты имен

TypeScript типизация Props:
type Props = { doneRate: number } строго определяет структуру параметров
number гарантирует, что компонент получает только числовое значение
TypeScript проверяет типы на этапе компиляции, предотвращая ошибки

Деструктуризация параметров:
{ doneRate }: Props извлекает свойство doneRate напрямую из props
Упрощает доступ к данным без необходимости писать props.doneRate
Повышает читаемость кода

Логика выбора CSS класса:
Вложенные тернарные операторы проверяют диапазоны значений
>= 80 - зеленый индикатор (успешное выполнение)
>= 50 - желтый индикатор (средний результат)
< 50 - красный индикатор (низкий результат)
Границы выбраны интуитивно для пользовательского восприятия

Шаблонные строки для классов:
`${s.badge} ${cls}` объединяет статический и динамический классы
s.badge обеспечивает базовое оформление (размеры, отступы, шрифт)
cls добавляет цветовое кодирование состояния

Атрибут title для доступности:
Всплывающая подсказка появляется при наведении мыши
Предоставляет дополнительный контекст для пользователя
Улучшает пользовательский опыт, особенно для сложных интерфейсов

Семантическая разметка содержимого:
"Готово: " - понятная русскоязычная метка
<b>{doneRate}%</b> - визуальное выделение ключевого показателя
Процентный формат стандартен для подобных метрик

Инлайн-отображение компонента:
Использование <span> делает компонент строчным элементом
Позволяет встраивать в текст, таблицы, другие компоненты
Не нарушает поток документа

Простота и переиспользуемость:
Компонент не имеет внутреннего состояния (stateless)
Зависит только от входного параметра doneRate
Легко тестировать и интегрировать в различные части приложения

Соответствие принципам React:
Functional Component с хуками (при необходимости)
Чистая функция без побочных эффектов
Предсказуемый рендеринг на основе входных параметров

*/
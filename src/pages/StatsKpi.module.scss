// Подключение файла с переменными из папки стилей с использованием пространства имен 'variables'
// Директива @use импортирует переменные SCSS для использования в этом файле
// 'as *' означает импорт всех переменных без необходимости использования префикса namespace
@use "../styles/abstracts/variables" as *;

// Стили для grid-контейнера который содержит карточки KPI
// Класс .grid определяет layout для адаптивной сетки карточек с показателями
.grid {
    // Установка элемента как grid-контейнера
    // CSS Grid создает двумерную сетку для расположения карточек KPI
    display: grid;

    // Определение адаптивной структуры колонок grid-сетки
    // repeat(auto-fill, minmax(180px, 1fr)) - создает автоматически заполняемые колонки:
    //   - auto-fill - автоматически заполняет строку максимальным количеством колонок
    //   - minmax(180px, 1fr) - каждая колонка имеет минимальную ширину 180px и максимальную 1fr
    //   - 180px - минимальная ширина обеспечивает читаемость содержимого карточек
    //   - 1fr - единица измерения fraction, распределяет доступное пространство пропорционально
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));

    // Расстояние между grid-элементами (карточками KPI)
    // 10px - компактное расстояние между карточками для плотного расположения
    gap: 10px;

    // Внешние отступы контейнера: 10px сверху, 0 справа и слева, 6px снизу
    // margin создает пространство вокруг всей сетки карточек
    margin: 10px 0 6px;
}

// Стили для отдельной карточки KPI (Key Performance Indicator)
// Класс .card определяет внешний вид каждой карточки с показателем эффективности
.card {
    // Цвет фона карточки
    // $bg-color - переменная SCSS, содержащая основной цвет фона из файла variables
    background: $bg-color;

    // Граница карточки толщиной 1px сплошная
    // $border-color - переменная SCSS, содержащая цвет границы из файла variables
    border: 1px solid $border-color;

    // Скругление углов карточки
    // $radius-lg - переменная SCSS, содержащая значение большого радиуса скругления
    border-radius: $radius-lg;

    // Внутренние отступы карточки: 10px сверху и снизу, 12px слева и справа
    padding: 10px 12px;

    // Тень карточки для создания эффекта глубины
    // $shadow-sm - переменная SCSS, содержащая значение малой тени из файла variables
    box-shadow: $shadow-sm;

    // Установка элемента как flex-контейнера
    // display: flex создает flex-контекст для дочерних элементов
    display: flex;

    // Направление расположения flex-элементов - вертикальная колонка
    // column - располагает дочерние элементы вертикально сверху вниз
    flex-direction: column;

    // Расстояние между дочерними flex-элементами (меткой и значением)
    // 4px - минимальное расстояние для компактного отображения
    gap: 4px;

    // Минимальная ширина карточки - 0
    // min-width: 0 позволяет карточке сжиматься меньше минимального content width
    // важно для text-overflow - без этого свойства text-overflow не работает в flex/grid контексте
    min-width: 0; // важно для text-overflow
}

// Стили для метки (названия) показателя в карточке KPI
// Класс .label определяет внешний вид текстовой метки показателя
.label {
    // Размер шрифта для метки - очень маленький
    // 12px - компактный размер для второстепенной информации
    font-size: 12px;

    // Прозрачность текста - 70% от оригинальной непрозрачности
    // 0.7 - значение opacity, создает полупрозрачный эффект для менее важного текста
    opacity: 0.7;

    // Запрет переноса текста на новую строку
    // nowrap - значение, которое предотвращает разрыв текста метки
    white-space: nowrap;

    // Скрытие содержимого, выходящего за границы контейнера
    // hidden - обрезает текст который не помещается в контейнер по ширине
    overflow: hidden;

    // Добавление многоточия (...) в конце обрезанного текста
    // ellipsis - значение, которое показывает многоточие когда текст обрезан
    text-overflow: ellipsis;
}

// Стили для значения показателя в карточке KPI
// Класс .value определяет внешний вид числового или строкового значения показателя
.value {
    // Насыщенность шрифта - жирное начертание
    // 700 - значение font-weight для bold, выделяет значение показателя
    font-weight: 700;

    // Адаптивный размер шрифта с использованием CSS функции clamp()
    // clamp(18px, 2.2vw, 22px) - создает плавно изменяющийся размер шрифта:
    //   - 18px - минимальный размер (на маленьких экранах)
    //   - 2.2vw - динамический размер (2.2% от ширины viewport)
    //   - 22px - максимальный размер (на больших экранах)
    // шрифт подгоняем без перелома и без налезания на границы
    font-size: clamp(18px, 2.2vw, 22px);

    // Межстрочный интервал - 1.1 (110% от размера шрифта)
    // line-height: 1.1 обеспечивает компактное вертикальное расположение текста
    line-height: 1.1;

    // Запрет переноса текста на новую строку
    // nowrap - значение, которое предотвращает разрыв текста значения
    white-space: nowrap;

    // Скрытие содержимого, выходящего за границы контейнера
    // hidden - обрезает текст который не помещается в контейнер по ширине
    overflow: hidden;

    // Добавление многоточия (...) в конце обрезанного текста
    // ellipsis - значение, которое показывает многоточие когда текст обрезан
    text-overflow: ellipsis;
}

// =====================================================
// ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В КОДЕ:
// =====================================================

// 1. АДАПТИВНАЯ СЕТКА (RESPONSIVE GRID):
//    - auto-fill: автоматически подбирает количество колонок по ширине контейнера
//    - minmax(180px, 1fr): гарантирует читаемость но позволяет растягиваться
//    - На узких экранах: 1 колонка, на широких - несколько колонок
//    - Плавная адаптация без медиа-запросов

// 2. CSS GRID VS FLEXBOX:
//    - Grid для внешнего layout (расположение карточек)
//    - Flexbox для внутреннего layout (расположение элементов внутри карточки)
//    - Каждый инструмент используется для своей задачи

// 3. ТИПОГРАФИЧЕСКАЯ ИЕРАРХИЯ:
//    - .label: 12px, opacity 0.7 - второстепенная информация
//    - .value: clamp(18px, 2.2vw, 22px), font-weight 700 - акцент на ключевых цифрах
//    - Контраст размеров и насыщенности создает четкую визуальную иерархию

// 4. АДАПТИВНАЯ ТИПОГРАФИКА:
//    - clamp() - современная CSS функция для плавного изменения размеров
//    - 2.2vw - относительная единица от ширины viewport
//    - Предотвращает резкие скачки размера шрифта между breakpoints

// 5. ОБРЕЗКА ТЕКСТА И УПРАВЛЕНИЕ ПЕРЕПОЛНЕНИЕМ:
//    - white-space: nowrap - предотвращает перенос длинного текста
//    - overflow: hidden - скрывает текст выходящий за границы
//    - text-overflow: ellipsis - добавляет многоточие для обрезанного текста
//    - min-width: 0 - критически важно для работы text-overflow в flex/grid

// 6. ДИЗАЙН-СИСТЕМА И ПЕРЕМЕННЫЕ:
//    - Полное использование переменных ($bg-color, $border-color, $radius-lg, $shadow-sm)
//    - Согласованность с общей дизайн-системой приложения
//    - Легкость изменения темы через модификацию переменных

// 7. ПРОСТРАНСТВО И ОТСТУПЫ:
//    - margin: 10px 0 6px - сбалансированные отступы вокруг сетки
//    - padding: 10px 12px - достаточные внутренние отступы для контента
//    - gap: 10px (внешний) и gap: 4px (внутренний) - иерархия расстояний

// 8. ВИЗУАЛЬНОЕ ВОСПРИЯТИЕ:
//    - box-shadow: $shadow-sm - легкая тень для создания глубины и отделения от фона
//    - border-radius: $radius-lg - скругленные углы для современного вида
//    - border: 1px solid - тонкая граница для четкого разделения

// 9. ПРОИЗВОДИТЕЛЬНОСТЬ И ДОСТУПНОСТЬ:
//    - CSS Grid хорошо оптимизирован в современных браузерах
//    - Достаточный цветовой контраст для читаемости
//    - Правильные размеры для удобного взаимодействия

// 10. ИСПОЛЬЗОВАНИЕ В КОМПОНЕНТАХ:
//     - Предназначен для отображения KPI (ключевых показателей эффективности)
//     - Подходит для дашбордов, аналитических панелей, отчетов
//     - Универсальный компонент для любых числовых показателей
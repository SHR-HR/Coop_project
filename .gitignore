# Игнорирование файлов логов
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Игнорирование зависимостей и сборок
node_modules
dist
dist-ssr
*.local

# Игнорирование файлов и директорий редакторов
.env
.env.*
!.env.example
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?



# /* ===== ПОЯСНЕНИЯ К КОММЕНТАРИЯМ ===== */

# /*
# 1. Назначение файла .gitignore:
#    - Определяет файлы и директории, которые Git должен игнорировать
#    - Предотвращает коммит временных, сгенерированных и конфиденциальных файлов
#    - Уменьшает размер репозитория и улучшает производительность

# 2. Логи и отладочные файлы:
#    - logs/ - директория с логами приложения
#    - *.log - все файлы с расширением .log
#    - *-debug.log* - отладочные логи различных пакетных менеджеров
#    - Эти файлы временные и не должны храниться в репозитории

# 3. Зависимости и сборки:
#    - node_modules/ - директория с npm зависимостями (можно восстановить через npm install)
#    - dist/ - директория с production сборкой проекта
#    - dist-ssr/ - директория с server-side rendering сборкой
#    - *.local - локальные конфигурационные файлы

# 4. Файлы редакторов и IDE:
#    - .vscode/ - настройки VS Code (игнорируется, кроме extensions.json)
#    - .idea/ - настройки JetBrains IDE (WebStorm, IntelliJ)
#    - .DS_Store - файлы метаданных macOS
#    - *.suo, *.ntvs*, *.njsproj, *.sln - файлы проектов Visual Studio
#    - *.sw? - swap файлы редакторов

# 5. Файлы окружения:
#    - .env - файлы с переменными окружения (содержат чувствительные данные)
#    - .env.* - все файлы с префиксом .env.
#    - !.env.example - ИСКЛЮЧЕНИЕ: файл-пример .env должен коммититься

# 6. Синтаксис .gitignore:
#    - / в конце - указывает на директорию
#    - * - wildcard для любого количества символов
#    - ? - wildcard для одного символа
#    - ! - инверсия (исключение из правил игнорирования)
#    - # - комментарии

# 7. Безопасность:
#    - .env файлы часто содержат пароли, API ключи, секреты
#    - Никогда не коммитить файлы с чувствительными данными
#    - .env.example служит шаблоном для настройки окружения

# 8. Производительность:
#    - Игнорирование node_modules/ значительно ускоряет операции Git
#    - dist/ файлы можно перегенерировать, поэтому не нужно хранить
#    - Уменьшает размер .git директории

# 9. Совместная разработка:
#    - Каждый разработчик имеет свои настройки редактора
#    - Игнорирование файлов IDE предотвращает конфликты
#    - Обеспечивает чистую историю коммитов

# 10. Best practices:
#     - Всегда включать node_modules/ в .gitignore для Node.js проектов
#     - Игнорировать файлы сборки и артефакты
#     - Предоставлять .env.example с шаблоном конфигурации
#     - Регулярно обновлять .gitignore для новых инструментов

# 11. Особые случаи:
#     - !.vscode/extensions.json - рекомендуется коммитить для согласованности расширений
#     - !.env.example - шаблон для настройки окружения новыми разработчиками
# */